[{"title": "Benchmarks for BERT Large Question Answering inference for RedisAI and RedisGears",
"url": "https://reference-architecture.ai/docs/bert-qa-benchmarking/",
"body": "<h2 id=\"summary-of-the-article\">Summary of the article</h2>\n<p>This article will explore the challenges and opportunities of deploying a large BERT Question Answering Transformer model(bert-large-uncased-whole-word-masking-finetuned-squad) from inside Huggingface, where <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://developer.redis.com/howtos/redisgears?utm_campaign=write_for_redis\">RedisGears</a> and <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://developer.redis.com/howtos/redisai/getting-started?utm_campaign=write_for_redis\">RedisAI</a> perform heavy lifting while leveraging in-memory datastore Redis.</p>\n<h2 id=\"why-do-we-need-redisai\">Why do we need RedisAI?</h2>\n<ul>\n<li>In data science load, you want to load high-performance hardware as close to 100% as possible </li>\n<li>In user-facing load, you want to be able to distribute the load evenly, so it never reaches 100%, and client-facing servers can perform additional functions</li>\n<li>In data science, you prefer re-calculate results</li>\n<li>In a client-facing application, you prefer to cache results of calculation and fetch data from the cache as fast as possible to drive a seamless customer experience</li>\n</ul>\n<p>Some numbers for inspiration and why to read this article:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">python3 transformers_plain_bert_qa.py \n</span><span style=\"color:#abb2bf;\">airborne transmission of respiratory infections is the lack of established methods for the detection of airborne respiratory microorganisms\n</span><span style=\"color:#abb2bf;\">10.351818372 seconds\n</span></code></pre>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">time curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &#39;{&quot;search&quot;:&quot;Who performs viral transmission among adults&quot;}&#39; http://localhost:8080/qasearch\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">real\t0m0.747s\n</span><span style=\"color:#abb2bf;\">user\t0m0.004s\n</span><span style=\"color:#abb2bf;\">sys\t0m0.000s\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<h1 id=\"background\">Background</h1>\n<p>BERT Question Answering inference works where the ML model selects an answer from the given text. In other words, BERT QA &quot;thinks&quot; through the following: &quot;What is the answer from the text, assuming the answer to the question exists within the paragraph selected.&quot;</p>\n<p>So it's important to select text potentially containing an answer. A typical pattern is to use Wikipedia data to build <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://lilianweng.github.io/posts/2020-10-29-odqa/\">Open Domain Question Answering</a>.</p>\n<p>Our QA system is a medical domain-specific question/answering pipeline, hence we need a first pipeline that turns data into a knowledge graph. This NLP pipeline is available at Redis LaunchPad, is fully <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern\">open source</a>, and is described in <a href=\"/howtos/nlp\">a previous article</a>. Here is a 5 minute <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.youtube.com/watch?v=VgJ8DTX5Mt4\">video</a> describing it, and below you will find an architectural overview:</p>\n<p><img src=\"https://reference-architecture.ai/docs/bert-qa-benchmarking/featured.png\" alt=\"featured\" /></p>\n<h1 id=\"bert-question-answering-pipeline-and-api\">BERT Question Answering pipeline and API</h1>\n<p>In the BERT QA pipeline (or in any other modern NLP inference task), there are two steps:</p>\n<ol>\n<li>Tokenize text - turn text into numbers</li>\n<li>Run the inference - large matrix multiplication</li>\n</ol>\n<p>With Redis, we have the opportunity to pre-compute everything and store it in memory, but how do we do it? Unlike with the summarization ML learning task, the question is not known in advance, so we can't pre-compute all possible answers. However, we can pre-tokenize all potential answers (i.e. all paragraphs in the dataset) using RedisGears:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">parse_sentence</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">record</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">redisAI\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">numpy </span><span style=\"color:#cd74e8;\">as </span><span style=\"color:#abb2bf;\">np\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">global </span><span style=\"color:#abb2bf;\">tokenizer\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if not </span><span style=\"color:#abb2bf;\">tokenizer:\n</span><span style=\"color:#abb2bf;\">        tokenizer</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">loadTokeniser</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">    hash_tag</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;{</span><span style=\"color:#db9d63;\">%s</span><span style=\"color:#9acc76;\">}&quot; </span><span style=\"color:#adb7c9;\">% </span><span style=\"color:#eb6772;\">hashtag</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">for </span><span style=\"color:#abb2bf;\">idx, value </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#5ebfcc;\">sorted</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;value&#39;</span><span style=\"color:#abb2bf;\">].</span><span style=\"color:#eb6772;\">items</span><span style=\"color:#abb2bf;\">(), </span><span style=\"color:#eb6772;\">key</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#cd74e8;\">lambda </span><span style=\"color:#eb6772;\">item</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#5ebfcc;\">int</span><span style=\"color:#abb2bf;\">(item[</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">])):\n</span><span style=\"color:#abb2bf;\">        tokens </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">tokenizer.</span><span style=\"color:#eb6772;\">encode</span><span style=\"color:#abb2bf;\">(value, </span><span style=\"color:#eb6772;\">add_special_tokens</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">False</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">max_length</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">511</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">truncation</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">return_tensors</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;np&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">        tokens </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">append</span><span style=\"color:#abb2bf;\">(tokens,tokenizer.sep_token_id).</span><span style=\"color:#eb6772;\">astype</span><span style=\"color:#abb2bf;\">(np.int64)\n</span><span style=\"color:#abb2bf;\">        tensor</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">createTensorFromBlob</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;INT64&#39;</span><span style=\"color:#abb2bf;\">, tokens.shape, tokens.</span><span style=\"color:#eb6772;\">tobytes</span><span style=\"color:#abb2bf;\">())\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">        key_prefix</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&#39;sentence:&#39;\n</span><span style=\"color:#abb2bf;\">        sentence_key</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">remove_prefix</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">],key_prefix)\n</span><span style=\"color:#abb2bf;\">        token_key </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&quot;tokenized:bert:qa:</span><span style=\"color:#abb2bf;\">{sentence_key}</span><span style=\"color:#9acc76;\">:</span><span style=\"color:#abb2bf;\">{idx}</span><span style=\"color:#9acc76;\">&quot;\n</span><span style=\"color:#abb2bf;\">        redisAI.</span><span style=\"color:#eb6772;\">setTensorInKey</span><span style=\"color:#abb2bf;\">(token_key, tensor)\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#eb6772;\">execute</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;SADD&#39;</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&#39;processed_docs_stage3_tokenized</span><span style=\"color:#abb2bf;\">{hash_tag}</span><span style=\"color:#9acc76;\">&#39;</span><span style=\"color:#abb2bf;\">, token_key)\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<p>See the <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-api/blob/156633b9934f1243775671ce6c18ff2bf471c0ce/qasearch/tokeniser_gears_redisai.py#L17\">full code on GitHub</a>.</p>\n<p>Then for each Redis Cluster shard, we pre-load the BERT QA model by downloading, exporting it into torchscript, then loading it into each shard:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">load_bert</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">    model_file </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#9acc76;\">&#39;traced_bert_qa.pt&#39;\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">with </span><span style=\"color:#5ebfcc;\">open</span><span style=\"color:#abb2bf;\">(model_file, </span><span style=\"color:#9acc76;\">&#39;rb&#39;</span><span style=\"color:#abb2bf;\">) </span><span style=\"color:#cd74e8;\">as </span><span style=\"color:#abb2bf;\">f:\n</span><span style=\"color:#abb2bf;\">        model </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">f.</span><span style=\"color:#eb6772;\">read</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">    startup_nodes </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">[{</span><span style=\"color:#9acc76;\">&quot;host&quot;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&quot;127.0.0.1&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&quot;port&quot;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&quot;30001&quot;</span><span style=\"color:#abb2bf;\">}, {</span><span style=\"color:#9acc76;\">&quot;host&quot;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&quot;127.0.0.1&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&quot;port&quot;</span><span style=\"color:#abb2bf;\">:</span><span style=\"color:#9acc76;\">&quot;30002&quot;</span><span style=\"color:#abb2bf;\">}, {</span><span style=\"color:#9acc76;\">&quot;host&quot;</span><span style=\"color:#abb2bf;\">:</span><span style=\"color:#9acc76;\">&quot;127.0.0.1&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&quot;port&quot;</span><span style=\"color:#abb2bf;\">:</span><span style=\"color:#9acc76;\">&quot;30003&quot;</span><span style=\"color:#abb2bf;\">}]\n</span><span style=\"color:#abb2bf;\">    cc </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">ClusterClient</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">startup_nodes </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">startup_nodes)\n</span><span style=\"color:#abb2bf;\">    hash_tags </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">cc.</span><span style=\"color:#eb6772;\">execute_command</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&quot;RG.PYEXECUTE&quot;</span><span style=\"color:#abb2bf;\">,  </span><span style=\"color:#9acc76;\">&quot;gb = GB(&#39;ShardsIDReader&#39;).map(lambda x:hashtag()).run()&quot;</span><span style=\"color:#abb2bf;\">)[</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#5ebfcc;\">print</span><span style=\"color:#abb2bf;\">(hash_tags)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">for </span><span style=\"color:#abb2bf;\">hash_tag </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#abb2bf;\">hash_tags:\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#5ebfcc;\">print</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&quot;Loading model bert-qa{</span><span style=\"color:#db9d63;\">%s</span><span style=\"color:#9acc76;\">}&quot; </span><span style=\"color:#adb7c9;\">%</span><span style=\"color:#abb2bf;\">hash_tag.</span><span style=\"color:#eb6772;\">decode</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;utf-8&#39;</span><span style=\"color:#abb2bf;\">))\n</span><span style=\"color:#abb2bf;\">        cc.</span><span style=\"color:#eb6772;\">modelset</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;bert-qa{</span><span style=\"color:#db9d63;\">%s</span><span style=\"color:#9acc76;\">}&#39; </span><span style=\"color:#adb7c9;\">%</span><span style=\"color:#abb2bf;\">hash_tag.</span><span style=\"color:#eb6772;\">decode</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;utf-8&#39;</span><span style=\"color:#abb2bf;\">), </span><span style=\"color:#9acc76;\">&#39;TORCH&#39;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&#39;CPU&#39;</span><span style=\"color:#abb2bf;\">, model)\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#5ebfcc;\">print</span><span style=\"color:#abb2bf;\">(cc.</span><span style=\"color:#eb6772;\">infoget</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;bert-qa{</span><span style=\"color:#db9d63;\">%s</span><span style=\"color:#9acc76;\">}&#39; </span><span style=\"color:#adb7c9;\">%</span><span style=\"color:#abb2bf;\">hash_tag.</span><span style=\"color:#eb6772;\">decode</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;utf-8&#39;</span><span style=\"color:#abb2bf;\">)))\n</span></code></pre>\n<p>The <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-api/blob/156633b9934f1243775671ce6c18ff2bf471c0ce/qasearch/export_load_bert.py\">full code is available on GitHub</a>.</p>\n<p>And when a question comes from the user, we tokenize and append the question to the list of potential answers before running the RedisAI model:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\">    token_key </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&quot;tokenized:bert:qa:</span><span style=\"color:#abb2bf;\">{sentence_key}</span><span style=\"color:#9acc76;\">&quot;\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># encode question\n</span><span style=\"color:#abb2bf;\">    input_ids_question </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">tokenizer.</span><span style=\"color:#eb6772;\">encode</span><span style=\"color:#abb2bf;\">(question, </span><span style=\"color:#eb6772;\">add_special_tokens</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">truncation</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">return_tensors</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;np&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    t</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">getTensorFromKey</span><span style=\"color:#abb2bf;\">(token_key)\n</span><span style=\"color:#abb2bf;\">    input_ids_context</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">to_np</span><span style=\"color:#abb2bf;\">(t,np.int64)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># merge (append) with potential answer, context - is pre-tokenized paragraph\n</span><span style=\"color:#abb2bf;\">    input_ids </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">append</span><span style=\"color:#abb2bf;\">(input_ids_question,input_ids_context)\n</span><span style=\"color:#abb2bf;\">    attention_mask </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">array</span><span style=\"color:#abb2bf;\">([[</span><span style=\"color:#db9d63;\">1</span><span style=\"color:#abb2bf;\">]</span><span style=\"color:#adb7c9;\">*</span><span style=\"color:#5ebfcc;\">len</span><span style=\"color:#abb2bf;\">(input_ids)])\n</span><span style=\"color:#abb2bf;\">    input_idss</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">array</span><span style=\"color:#abb2bf;\">([input_ids])\n</span><span style=\"color:#abb2bf;\">    num_seg_a</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">input_ids_question.shape[</span><span style=\"color:#db9d63;\">1</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    num_seg_b</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">input_ids_context.shape[</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    token_type_ids </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">array</span><span style=\"color:#abb2bf;\">([</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">]</span><span style=\"color:#adb7c9;\">*</span><span style=\"color:#abb2bf;\">num_seg_a </span><span style=\"color:#adb7c9;\">+ </span><span style=\"color:#abb2bf;\">[</span><span style=\"color:#db9d63;\">1</span><span style=\"color:#abb2bf;\">]</span><span style=\"color:#adb7c9;\">*</span><span style=\"color:#abb2bf;\">num_seg_b)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># create actual model runner for RedisAI\n</span><span style=\"color:#abb2bf;\">    modelRunner </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">createModelRunner</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&#39;bert-qa</span><span style=\"color:#abb2bf;\">{hash_tag}</span><span style=\"color:#9acc76;\">&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># make sure all types are correct\n</span><span style=\"color:#abb2bf;\">    input_idss_ts</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">createTensorFromBlob</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;INT64&#39;</span><span style=\"color:#abb2bf;\">, input_idss.shape, input_idss.</span><span style=\"color:#eb6772;\">tobytes</span><span style=\"color:#abb2bf;\">())\n</span><span style=\"color:#abb2bf;\">    attention_mask_ts</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">createTensorFromBlob</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;INT64&#39;</span><span style=\"color:#abb2bf;\">, attention_mask.shape, attention_mask.</span><span style=\"color:#eb6772;\">tobytes</span><span style=\"color:#abb2bf;\">())\n</span><span style=\"color:#abb2bf;\">    token_type_ids_ts</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">createTensorFromBlob</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;INT64&#39;</span><span style=\"color:#abb2bf;\">, token_type_ids.shape, token_type_ids.</span><span style=\"color:#eb6772;\">tobytes</span><span style=\"color:#abb2bf;\">())\n</span><span style=\"color:#abb2bf;\">    redisAI.</span><span style=\"color:#eb6772;\">modelRunnerAddInput</span><span style=\"color:#abb2bf;\">(modelRunner, </span><span style=\"color:#9acc76;\">&#39;input_ids&#39;</span><span style=\"color:#abb2bf;\">, input_idss_ts)\n</span><span style=\"color:#abb2bf;\">    redisAI.</span><span style=\"color:#eb6772;\">modelRunnerAddInput</span><span style=\"color:#abb2bf;\">(modelRunner, </span><span style=\"color:#9acc76;\">&#39;attention_mask&#39;</span><span style=\"color:#abb2bf;\">, attention_mask_ts)\n</span><span style=\"color:#abb2bf;\">    redisAI.</span><span style=\"color:#eb6772;\">modelRunnerAddInput</span><span style=\"color:#abb2bf;\">(modelRunner, </span><span style=\"color:#9acc76;\">&#39;token_type_ids&#39;</span><span style=\"color:#abb2bf;\">, token_type_ids_ts)\n</span><span style=\"color:#abb2bf;\">    redisAI.</span><span style=\"color:#eb6772;\">modelRunnerAddOutput</span><span style=\"color:#abb2bf;\">(modelRunner, </span><span style=\"color:#9acc76;\">&#39;answer_start_scores&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    redisAI.</span><span style=\"color:#eb6772;\">modelRunnerAddOutput</span><span style=\"color:#abb2bf;\">(modelRunner, </span><span style=\"color:#9acc76;\">&#39;answer_end_scores&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># run RedisAI model runner\n</span><span style=\"color:#abb2bf;\">    res </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#cd74e8;\">await </span><span style=\"color:#abb2bf;\">redisAI.</span><span style=\"color:#eb6772;\">modelRunnerRunAsync</span><span style=\"color:#abb2bf;\">(modelRunner)\n</span><span style=\"color:#abb2bf;\">    answer_start_scores</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">to_np</span><span style=\"color:#abb2bf;\">(res[</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">],np.float32)\n</span><span style=\"color:#abb2bf;\">    answer_end_scores </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">to_np</span><span style=\"color:#abb2bf;\">(res[</span><span style=\"color:#db9d63;\">1</span><span style=\"color:#abb2bf;\">],np.float32)\n</span><span style=\"color:#abb2bf;\">    answer_start </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">argmax</span><span style=\"color:#abb2bf;\">(answer_start_scores)\n</span><span style=\"color:#abb2bf;\">    answer_end </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">np.</span><span style=\"color:#eb6772;\">argmax</span><span style=\"color:#abb2bf;\">(answer_end_scores) </span><span style=\"color:#adb7c9;\">+ </span><span style=\"color:#db9d63;\">1\n</span><span style=\"color:#abb2bf;\">    answer </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">tokenizer.</span><span style=\"color:#eb6772;\">convert_tokens_to_string</span><span style=\"color:#abb2bf;\">(tokenizer.</span><span style=\"color:#eb6772;\">convert_ids_to_tokens</span><span style=\"color:#abb2bf;\">(input_ids[answer_start:answer_end],</span><span style=\"color:#eb6772;\">skip_special_tokens </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&quot;Answer &quot;</span><span style=\"color:#adb7c9;\">+</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(answer))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">answer\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<p>Checkout the <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-api/blob/156633b9934f1243775671ce6c18ff2bf471c0ce/qasearch/qa_redisai_keymiss_no_cache_np.py#L34\">full code, available on GitHub</a>.</p>\n<p>The process for making a BERT QA API call looks like this:</p>\n<p><img src=\"https://reference-architecture.ai/docs/bert-qa-benchmarking/diagrams_02.png\" alt=\"Architecture Diagram for BERT QA RedisGears and RedisAI\" /></p>\n<p>Here I use two cool features of RedisGears: capturing events on key miss and using async/await to run RedisAI on each shard without locking the primary thread - so that Redis Cluster can continue to serve other customers. For benchmarks, caching responses from RedisAI is <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-api/blob/156633b9934f1243775671ce6c18ff2bf471c0ce/qasearch/qa_redisai_keymiss_no_cache_np.py#L29\">disabled</a>. If you are getting response times in nanoseconds on the second call rather then milliseconds, check to make sure the line linked above is commented out.</p>\n<h1 id=\"running-the-benchmark\">Running the Benchmark</h1>\n<p>Pre-requisites for running the benchmark:</p>\n<p>Assuming you are running Debian or Ubuntu and have Docker and docker-compose installed (or can create a virtual environment via conda), run the following commands:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">git clone --recurse-submodules https://github.com/applied-knowledge-systems/the-pattern.git\n</span><span style=\"color:#abb2bf;\">cd the-pattern\n</span><span style=\"color:#abb2bf;\">./bootstrap_benchmark.sh\n</span></code></pre>\n<p>The above commands should end with a curl call to the qasearch API, since Redis caching is disabled for the benchmark.</p>\n<p>Next, invoke curl like this:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">time curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &#39;{&quot;search&quot;:&quot;Who performs viral transmission among adults&quot;}&#39; http://localhost:8080/qasearch\n</span></code></pre>\n<p>Expect the following output, or something similar based on your runtime environment:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">HTTP/1.1 200 OK\n</span><span style=\"color:#abb2bf;\">Server: nginx/1.18.0 (Ubuntu)\n</span><span style=\"color:#abb2bf;\">Date: Sun, 29 May 2022 12:05:39 GMT\n</span><span style=\"color:#abb2bf;\">Content-Type: application/json\n</span><span style=\"color:#abb2bf;\">Content-Length: 2120\n</span><span style=\"color:#abb2bf;\">Connection: keep-alive\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">{&quot;links&quot;:[{&quot;created_at&quot;:&quot;2002&quot;,&quot;rank&quot;:13,&quot;source&quot;:&quot;C0001486&quot;,&quot;target&quot;:&quot;C0152083&quot;}],&quot;results&quot;:[{&quot;answer&quot;:&quot;adenovirus&quot;,&quot;sentence&quot;:&quot;The medium of 40 T150 flasks of adenovirus transducer dec CAR CHO cells yielded 0 5 1 my of purified msCEACAM1a 1 4 protein&quot;,&quot;sentencekey&quot;:&quot;sentence:PMC125375.xml:{mG}:202&quot;,&quot;title&quot;:&quot;Crystal structure of murine sCEACAM1a[1,4]: a coronavirus receptor in the CEA family&quot;}] OUTPUT_REDUCTED}\n</span></code></pre>\n<p>I modified the output of API for the benchmark to return results from all shards - even if the answer is empty, in the run above five shards return answers, overall API call response under second with all additional hops to search in RedisGraph.</p>\n<p>I modified the output of the API for the benchmark to return results from all shards - even if the answer is empty. In the run above five shards return answers. The overall API call response takes less than one second with all additional hops to search in RedisGraph!</p>\n<p><img src=\"https://reference-architecture.ai/docs/bert-qa-benchmarking/diagrams_01.png\" alt=\"Architecture Diagram for BERT QA API call\" /></p>\n<h1 id=\"deep-dive-into-the-benchmark\">Deep Dive into the Benchmark</h1>\n<p>Let's dig deeper into what's happening under the hood:</p>\n<p>You should have a sentence key with shard id, which you get by looking at the &quot;Cache key&quot; from <code>docker logs -f rgcluster</code>. In my setup the cache key is, &quot;bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults&quot;. If you think it looks like a function call it's because it is a function call. It is triggered if the key isn't present in the Redis Cluster, which for the benchmark will be every time since if you remember we disabled caching the output.</p>\n<p>One more thing to figure out from the logs is the port of the shard corresponding to the hashtag, also known as the <code>shard id</code>. It is the text found in betweeen the curly brackets – looks like <code>{6fd}</code> above. The same will be in the output for the <code>export_load</code> script. In my case the cache key was found in &quot;30012.log&quot;, so my port is 30012.</p>\n<p>Next I run the following command:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">redis-cli -c -p 300012 -h 127.0.0.1 get &quot;bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults&quot;\n</span></code></pre>\n<p>and then run the benchmark:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">redis-benchmark -p 30012 -h 127.0.0.1 -n 10 get &quot;bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults&quot;\n</span><span style=\"color:#abb2bf;\">====== get bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults ======\n</span><span style=\"color:#abb2bf;\">  10 requests completed in 0.04 seconds\n</span><span style=\"color:#abb2bf;\">  50 parallel clients\n</span><span style=\"color:#abb2bf;\">  3 bytes payload\n</span><span style=\"color:#abb2bf;\">  keep alive: 1\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">10.00% &lt;= 41 milliseconds\n</span><span style=\"color:#abb2bf;\">100.00% &lt;= 41 milliseconds\n</span><span style=\"color:#abb2bf;\">238.10 requests per second\n</span></code></pre>\n<p>If you are wondering, <code>-n</code> = number of times. In this case we run the benchmark 10 times. You can also add:</p>\n<p>– <code>csv</code> if you want to output in CSV format</p>\n<p>– <code>precision 3</code> if you want more decimals in the ms</p>\n<p>More information about the benchmarking tool can be found on the <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://redis.io/topics/benchmarks\">redis.io Benchmarks page</a>.</p>\n<p>if you don't have redis-utils installed locally, you can use Docker as follows:</p>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#eb6772;\">docker</span><span style=\"color:#abb2bf;\"> exec</span><span style=\"color:#eb6772;\"> -it</span><span style=\"color:#abb2bf;\"> rgcluster /bin/bash\n</span><span style=\"color:#eb6772;\">redis-benchmark -p</span><span style=\"color:#abb2bf;\"> 30012</span><span style=\"color:#eb6772;\"> -h</span><span style=\"color:#abb2bf;\"> 127.0.0.1</span><span style=\"color:#eb6772;\"> -n</span><span style=\"color:#abb2bf;\"> 10 get </span><span style=\"color:#9acc76;\">&quot;bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults&quot;\n</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">===== </span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\"> bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults ======\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">10</span><span style=\"color:#abb2bf;\"> requests completed in 1.75 seconds\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">50</span><span style=\"color:#abb2bf;\"> parallel clients\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">99</span><span style=\"color:#abb2bf;\"> bytes payload\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">keep</span><span style=\"color:#abb2bf;\"> alive: 1\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">host</span><span style=\"color:#abb2bf;\"> configuration </span><span style=\"color:#9acc76;\">&quot;save&quot;</span><span style=\"color:#abb2bf;\">:\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">host</span><span style=\"color:#abb2bf;\"> configuration </span><span style=\"color:#9acc76;\">&quot;appendonly&quot;</span><span style=\"color:#abb2bf;\">: no\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">multi-thread:</span><span style=\"color:#abb2bf;\"> no\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#eb6772;\">Latency</span><span style=\"color:#abb2bf;\"> by percentile distribution:\n</span><span style=\"color:#eb6772;\">0.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 243.711 milliseconds (cumulative count 1)\n</span><span style=\"color:#eb6772;\">50.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 987.135 milliseconds (cumulative count 5)\n</span><span style=\"color:#eb6772;\">75.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1577.983 milliseconds (cumulative count 8)\n</span><span style=\"color:#eb6772;\">87.500% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1662.975 milliseconds (cumulative count 9)\n</span><span style=\"color:#eb6772;\">93.750% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1744.895 milliseconds (cumulative count 10)\n</span><span style=\"color:#eb6772;\">100.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1744.895 milliseconds (cumulative count 10)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#eb6772;\">Cumulative</span><span style=\"color:#abb2bf;\"> distribution of latencies:\n</span><span style=\"color:#eb6772;\">0.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 0.103 milliseconds (cumulative count 0)\n</span><span style=\"color:#eb6772;\">10.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 244.223 milliseconds (cumulative count 1)\n</span><span style=\"color:#eb6772;\">20.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 409.343 milliseconds (cumulative count 2)\n</span><span style=\"color:#eb6772;\">30.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 575.487 milliseconds (cumulative count 3)\n</span><span style=\"color:#eb6772;\">40.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 821.247 milliseconds (cumulative count 4)\n</span><span style=\"color:#eb6772;\">50.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 987.135 milliseconds (cumulative count 5)\n</span><span style=\"color:#eb6772;\">60.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1157.119 milliseconds (cumulative count 6)\n</span><span style=\"color:#eb6772;\">70.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1497.087 milliseconds (cumulative count 7)\n</span><span style=\"color:#eb6772;\">80.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1577.983 milliseconds (cumulative count 8)\n</span><span style=\"color:#eb6772;\">90.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1662.975 milliseconds (cumulative count 9)\n</span><span style=\"color:#eb6772;\">100.000% </span><span style=\"color:#adb7c9;\">&lt;</span><span style=\"color:#abb2bf;\">= 1744.895 milliseconds (cumulative count 10)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#eb6772;\">Summary:\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">throughput</span><span style=\"color:#abb2bf;\"> summary: 5.73 requests per second\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#eb6772;\">latency</span><span style=\"color:#abb2bf;\"> summary (msec)</span><span style=\"color:#5ebfcc;\">:\n</span><span style=\"color:#abb2bf;\">          </span><span style=\"color:#eb6772;\">avg</span><span style=\"color:#abb2bf;\">       min       p50       p95       p99       max\n</span><span style=\"color:#abb2bf;\">     </span><span style=\"color:#eb6772;\">1067.296</span><span style=\"color:#abb2bf;\">   243.584   987.135  1744.895  1744.895  1744.895\n</span></code></pre>\n<p>The platform only has 20 articles and 8 Redis nodes (4 masters + 4 slaves), so relevance would be wrong and it doesn't need a lot of memory.</p>\n<h2 id=\"ai-info\">AI.INFO</h2>\n<p>Now let's check how long our RedisAI model runs on the <code>{6fd}</code> shard:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">127.0.0.1:30012&gt; AI.INFO bert-qa{6fd}\n</span><span style=\"color:#abb2bf;\"> 1) &quot;key&quot;\n</span><span style=\"color:#abb2bf;\"> 2) &quot;bert-qa{6fd}&quot;\n</span><span style=\"color:#abb2bf;\"> 3) &quot;type&quot;\n</span><span style=\"color:#abb2bf;\"> 4) &quot;MODEL&quot;\n</span><span style=\"color:#abb2bf;\"> 5) &quot;backend&quot;\n</span><span style=\"color:#abb2bf;\"> 6) &quot;TORCH&quot;\n</span><span style=\"color:#abb2bf;\"> 7) &quot;device&quot;\n</span><span style=\"color:#abb2bf;\"> 8) &quot;CPU&quot;\n</span><span style=\"color:#abb2bf;\"> 9) &quot;tag&quot;\n</span><span style=\"color:#abb2bf;\">10) &quot;&quot;\n</span><span style=\"color:#abb2bf;\">11) &quot;duration&quot;\n</span><span style=\"color:#abb2bf;\">12) (integer) 8928136\n</span><span style=\"color:#abb2bf;\">13) &quot;samples&quot;\n</span><span style=\"color:#abb2bf;\">14) (integer) 58\n</span><span style=\"color:#abb2bf;\">15) &quot;calls&quot;\n</span><span style=\"color:#abb2bf;\">16) (integer) 58\n</span><span style=\"color:#abb2bf;\">17) &quot;errors&quot;\n</span><span style=\"color:#abb2bf;\">18) (integer) 0\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<p><code>bert-qa{6fd}</code> is the key of the actual (very large) model saved. The <code>AI.INFO</code> command gives us a cumulative duration of 8928136 microseconds and 58 calls, which is approximately 153 milliseconds per call.</p>\n<p>Let's double-check to make sure that's right by resetting the stats and then re-runnning the benchmark.</p>\n<p>First, reset the stats:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">127.0.0.1:30012&gt; AI.INFO bert-qa{6fd} RESETSTAT\n</span><span style=\"color:#abb2bf;\">OK\n</span><span style=\"color:#abb2bf;\">127.0.0.1:30012&gt; AI.INFO bert-qa{6fd}\n</span><span style=\"color:#abb2bf;\"> 1) &quot;key&quot;\n</span><span style=\"color:#abb2bf;\"> 2) &quot;bert-qa{6fd}&quot;\n</span><span style=\"color:#abb2bf;\"> 3) &quot;type&quot;\n</span><span style=\"color:#abb2bf;\"> 4) &quot;MODEL&quot;\n</span><span style=\"color:#abb2bf;\"> 5) &quot;backend&quot;\n</span><span style=\"color:#abb2bf;\"> 6) &quot;TORCH&quot;\n</span><span style=\"color:#abb2bf;\"> 7) &quot;device&quot;\n</span><span style=\"color:#abb2bf;\"> 8) &quot;CPU&quot;\n</span><span style=\"color:#abb2bf;\"> 9) &quot;tag&quot;\n</span><span style=\"color:#abb2bf;\">10) &quot;&quot;\n</span><span style=\"color:#abb2bf;\">11) &quot;duration&quot;\n</span><span style=\"color:#abb2bf;\">12) (integer) 0\n</span><span style=\"color:#abb2bf;\">13) &quot;samples&quot;\n</span><span style=\"color:#abb2bf;\">14) (integer) 0\n</span><span style=\"color:#abb2bf;\">15) &quot;calls&quot;\n</span><span style=\"color:#abb2bf;\">16) (integer) 0\n</span><span style=\"color:#abb2bf;\">17) &quot;errors&quot;\n</span><span style=\"color:#abb2bf;\">18) (integer) 0\n</span></code></pre>\n<p>Then, re-run the benchmark:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">redis-benchmark -p 30012 -h 127.0.0.1 -n 10 get &quot;bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults&quot;\n</span><span style=\"color:#abb2bf;\">====== get bertqa{6fd}_PMC169038.xml:{6fd}:33_Who performs viral transmission among adults ======\n</span><span style=\"color:#abb2bf;\">  10 requests completed in 1.78 seconds\n</span><span style=\"color:#abb2bf;\">  50 parallel clients\n</span><span style=\"color:#abb2bf;\">  99 bytes payload\n</span><span style=\"color:#abb2bf;\">  keep alive: 1\n</span><span style=\"color:#abb2bf;\">  host configuration &quot;save&quot;:\n</span><span style=\"color:#abb2bf;\">  host configuration &quot;appendonly&quot;: no\n</span><span style=\"color:#abb2bf;\">  multi-thread: no\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">Latency by percentile distribution:\n</span><span style=\"color:#abb2bf;\">0.000% &lt;= 188.927 milliseconds (cumulative count 1)\n</span><span style=\"color:#abb2bf;\">50.000% &lt;= 995.839 milliseconds (cumulative count 5)\n</span><span style=\"color:#abb2bf;\">75.000% &lt;= 1606.655 milliseconds (cumulative count 8)\n</span><span style=\"color:#abb2bf;\">87.500% &lt;= 1692.671 milliseconds (cumulative count 9)\n</span><span style=\"color:#abb2bf;\">93.750% &lt;= 1779.711 milliseconds (cumulative count 10)\n</span><span style=\"color:#abb2bf;\">100.000% &lt;= 1779.711 milliseconds (cumulative count 10)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">Cumulative distribution of latencies:\n</span><span style=\"color:#abb2bf;\">0.000% &lt;= 0.103 milliseconds (cumulative count 0)\n</span><span style=\"color:#abb2bf;\">10.000% &lt;= 189.183 milliseconds (cumulative count 1)\n</span><span style=\"color:#abb2bf;\">20.000% &lt;= 392.191 milliseconds (cumulative count 2)\n</span><span style=\"color:#abb2bf;\">30.000% &lt;= 540.159 milliseconds (cumulative count 3)\n</span><span style=\"color:#abb2bf;\">40.000% &lt;= 896.511 milliseconds (cumulative count 4)\n</span><span style=\"color:#abb2bf;\">50.000% &lt;= 996.351 milliseconds (cumulative count 5)\n</span><span style=\"color:#abb2bf;\">60.000% &lt;= 1260.543 milliseconds (cumulative count 6)\n</span><span style=\"color:#abb2bf;\">70.000% &lt;= 1456.127 milliseconds (cumulative count 7)\n</span><span style=\"color:#abb2bf;\">80.000% &lt;= 1606.655 milliseconds (cumulative count 8)\n</span><span style=\"color:#abb2bf;\">90.000% &lt;= 1692.671 milliseconds (cumulative count 9)\n</span><span style=\"color:#abb2bf;\">100.000% &lt;= 1779.711 milliseconds (cumulative count 10)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">Summary:\n</span><span style=\"color:#abb2bf;\">  throughput summary: 5.62 requests per second\n</span><span style=\"color:#abb2bf;\">  latency summary (msec):\n</span><span style=\"color:#abb2bf;\">          avg       min       p50       p95       p99       max\n</span><span style=\"color:#abb2bf;\">     1080.454   188.800   995.839  1779.711  1779.711  1779.711\n</span></code></pre>\n<p>Now check the stats again:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">AI.INFO bert-qa{6fd}\n</span><span style=\"color:#abb2bf;\"> 1) &quot;key&quot;\n</span><span style=\"color:#abb2bf;\"> 2) &quot;bert-qa{6fd}&quot;\n</span><span style=\"color:#abb2bf;\"> 3) &quot;type&quot;\n</span><span style=\"color:#abb2bf;\"> 4) &quot;MODEL&quot;\n</span><span style=\"color:#abb2bf;\"> 5) &quot;backend&quot;\n</span><span style=\"color:#abb2bf;\"> 6) &quot;TORCH&quot;\n</span><span style=\"color:#abb2bf;\"> 7) &quot;device&quot;\n</span><span style=\"color:#abb2bf;\"> 8) &quot;CPU&quot;\n</span><span style=\"color:#abb2bf;\"> 9) &quot;tag&quot;\n</span><span style=\"color:#abb2bf;\">10) &quot;&quot;\n</span><span style=\"color:#abb2bf;\">11) &quot;duration&quot;\n</span><span style=\"color:#abb2bf;\">12) (integer) 1767749\n</span><span style=\"color:#abb2bf;\">13) &quot;samples&quot;\n</span><span style=\"color:#abb2bf;\">14) (integer) 20\n</span><span style=\"color:#abb2bf;\">15) &quot;calls&quot;\n</span><span style=\"color:#abb2bf;\">16) (integer) 20\n</span><span style=\"color:#abb2bf;\">17) &quot;errors&quot;\n</span><span style=\"color:#abb2bf;\">18) (integer) 0\n</span></code></pre>\n<p>Now we get 88387.45 microseconds per call ~0.088387 seconds, which is pretty fast! Also, considering we started with 10 seconds per call, I think the benefits of using RedisAI in combination with RedisGears are pretty obvious. However, the trade-off is high memory usage.</p>\n<p>There are many ways to optimize this deployment. For example, you can add a FP16 quantization and ONNX runtime. If you would like to try that, <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-api/blob/7bcf021e537dc8d453036730f0a993dd52e1781f/qasearch/export_load_bert.py\">this script</a> will be a good starting point.</p>\n<h1 id=\"using-grafana-to-monitor-redisgears-throughput-cpu-and-memory-usage\">Using Grafana to monitor RedisGears throughput, CPU, and Memory usage</h1>\n<p>Thanks to the contribution of <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://volkovlabs.com/from-a-basic-redistimeseries-data-source-to-2-million-downloads-in-grafana-marketplace-9921ed9ac5a\">Mikhail Volkov</a>, we can now observe RedisGears and RedisGraph throughput and memory consumption using Grafana. When you cloned repository it started Graphana Docker, which has pre-build templates to monitor RedisCluster, including RedisGears and RedisAI, and Graph - which is Redis with RedisGraph. &quot;The Pattern&quot; dashboard provides an overview, with all the key benchmark metrics you care about:</p>\n<p><img src=\"https://reference-architecture.ai/docs/bert-qa-benchmarking/graphana_redis_graph.png\" alt=\"Grafana for RedisGraph\" /></p>\n<p><img src=\"https://reference-architecture.ai/docs/bert-qa-benchmarking/graphana_cluster_overview.png\" alt=\"Grafana for RedisCluster\" /></p>\n<p>This post is in collaboration with Redis.</p>\n"
},{"title": "Building a Pipeline for Natural Language Processing using RedisGears",
"url": "https://reference-architecture.ai/docs/nlp/",
"body": "<h2 id=\"goal\">Goal</h2>\n<p><em>Disclaimer</em> originally published in collaboration with <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/ajeetraina\">Ajeet Raina</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://developer.redis.com/howtos/nlp/\">Developer.Redis.Com</a></p>\n<p>In this tutorial, you will learn how to build a pipeline for  Natural Language Processing(NLP) using <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://developer.redis.com/howtos/redisgears\">RedisGears</a>. For this demonstration, we will be leveraging the Kaggle CORD19 datasets. The implementation is designed to avoid running out of memory, leveraging Redis Cluster and RedisGears, where the use of RedisGears allows for processing data on storage without the need to move data in and out of the Redis Cluster—using Redis Cluster as data fabric. Redis Cluster allows for horizontal scalability up to 1000 nodes, and together with RedisGears, provides a distributed system where data science/ML engineers can focus on processing steps, without the worry of writing tons of scaffoldings for distributed calculations.</p>\n<p><img src=\"https://reference-architecture.ai/docs/nlp/nlparch.png\" alt=\"nlp\" /></p>\n<p>This project was built with the aim to make it easier for other people to contribute and build better information and knowledge management products.</p>\n<h2 id=\"why-data-scientists-uses-redisgears\">Why data scientists uses RedisGears?</h2>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://redis.com/modules/redis-gears/\">RedisGears</a> have enormous potential, particularly for text processing—you can process your data “on data” without needing to move them in and out of memory. Summary of the important points: </p>\n<ul>\n<li>In Memory storage (Horizontally scalable if it’s Redis cluster)</li>\n<li>Processing of data (on data) without need to move in and out</li>\n<li>Gears - like Spark on Hadoop, process data intelligently on storage(in-memory) without need to move data in and out</li>\n<li>Redis in cluster mode with RedisGears and python enabled takes 20 MB RAM. Think how much more data you can shuffle into your laptop or server.</li>\n</ul>\n<h2 id=\"what-is-a-knowledge-graph\">What is a knowledge graph?</h2>\n<p>Today, we live in the world of new systems that operate not just files, folders, or web pages, but entities with their properties and relationships between them, organized into hierarchies of classes and categories. These systems are used everywhere from the military-industrial complex to our everyday lives. Palantir, Primer, and other data companies enable massive intelligence and counterintelligence projects in military and security forces, Quid and RecordedFuture enable competitive analytics, Bottlenose and similar enterprises enable online reputation analytics. Microsoft Graph enables new kinds of productivity apps for the enterprises, Google Knowledge Graph and Microsoft’s Satori enable everyday search queries, and together with Amazon Information Graph they power corresponding AI assistants by enabling them to answer questions about the world facts</p>\n<p>All these (and many other more specialized) systems are used in different domains, but all of them use Knowledge Graphs as their foundation.</p>\n<p>Knowledge graphs are one of the best ways to connect and make sense out of information from different data sources, following the motto of one of the vendors— <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.poolparty.biz/news-events/knowledge-graphs-connecting-dots-increasingly-complex-world/\">“It’s about things not strings”</a>. </p>\n<p>Knowledge Graph consists of thesaurus, taxonomy and ontology. In this pipeline I assume knowledge is captured in medical metathesaurus <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.nlm.nih.gov/research/umls/index.html\">UMLS</a> and concepts in text are related if they are part of the same sentence, therefore concept become node, their relationship becomes edge:</p>\n<p><img src=\"https://reference-architecture.ai/docs/nlp/concepts1.png\" alt=\"concepts1\" />\n<img src=\"https://reference-architecture.ai/docs/nlp/concepts2.png\" alt=\"concepts2\" /></p>\n<p>Concepts have CUI (Concept Unique Identifiers) and those will be primary keys in nodes, linked to UMLS thesaurus. For example, if you search, “How does temperature and humidity affect the transmission of 2019-nCoV?” on the demo website  <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"http://thepattern.digital\">http://thepattern.digital/</a> and move slider to 1996, there is an edge-connecting transmission (C5190195) and birth (C5195639) and the part of sentence matched, “the rate of transmission to an infant born to,” from the report titled, “Afebrile Pneumonia in infants.”</p>\n<p><img src=\"https://reference-architecture.ai/docs/nlp/concepts3.png\" alt=\"concepts3\" /></p>\n<h2 id=\"redisgears-for-nlp-pre-processing\">RedisGears for NLP pre-processing</h2>\n<h3 id=\"overall-architecture-overview-components-diagram\">Overall Architecture Overview (Components Diagram)</h3>\n<p><img src=\"https://reference-architecture.ai/docs/nlp/component_diagram.png\" alt=\"component_diagram\" /></p>\n<p>Intake step - is very simple put all JSON records into RedisCluster, then NLP pipeline starts processing all records, code is <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-platform/blob/main/RedisIntakeRedisClusterSample.py\">here</a>.</p>\n<h3 id=\"how-does-the-nlp-pipeline-steps-fit-into-redisgears\">How does the NLP pipeline steps fit into RedisGears?</h3>\n<ol>\n<li>\n<p>For each record — detect language (discard non English), it’s <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://oss.redis.com/redisgears/operations.html#filter\">filter</a></p>\n</li>\n<li>\n<p>Map paragraphs into a sentence — <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://oss.redis.com/redisgears/operations.html#flatmap\">flatmap</a></p>\n</li>\n<li>\n<p>Sentences spellchecker — it’s <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://oss.redis.com/redisgears/operations.html#map\">map</a></p>\n</li>\n<li>\n<p>Save sentences into hash — <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://oss.redis.com/redisgears/operations.html#processor\">processor</a></p>\n</li>\n</ol>\n<h3 id=\"step-1-pre-requisite\">Step 1. Pre-requisite</h3>\n<p>Ensure that you install virtualenv in your system</p>\n<h3 id=\"step-2-clone-the-repository\">Step 2. Clone the repository</h3>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">git</span><span style=\"color:#abb2bf;\"> clone</span><span style=\"color:#eb6772;\"> --recurse-submodules</span><span style=\"color:#abb2bf;\"> https://github.com/applied-knowledge-systems/the-pattern.git\n</span><span style=\"color:#abb2bf;\"> </span><span style=\"color:#5ebfcc;\">cd</span><span style=\"color:#abb2bf;\"> the-pattern\n</span></code></pre>\n<h3 id=\"step-3-bring-up-the-application\">Step 3. Bring up the application</h3>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">docker-compose -f</span><span style=\"color:#abb2bf;\"> docker-compose.dev.yml up</span><span style=\"color:#eb6772;\"> --build -d\n</span></code></pre>\n<h3 id=\"step-4-apply-cluster-configuration-settings\">Step 4. Apply cluster configuration settings</h3>\n<p>You can deploy PyTorch and spacy to run on RedisGears.</p>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">bash</span><span style=\"color:#abb2bf;\"> post_start_dev.sh\n</span></code></pre>\n<p><em>For Data science-focused deployment, RedisCluster should be in HA mode with at least one slave for each master. \nOne need to change a few default parameters for rgcluster to accommodate the size of PyTorch and spacy libraries (each over 1GB zipped), gist with settings.</em></p>\n<h3 id=\"step-5-create-or-activate-python-virtual-environment\">Step 5. Create or activate Python virtual environment</h3>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#5ebfcc;\">cd</span><span style=\"color:#abb2bf;\"> ./the-pattern-platform/\n</span></code></pre>\n<h3 id=\"step-6-create-new-environment\">Step 6. Create new environment</h3>\n<p>You can create it via </p>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">conda</span><span style=\"color:#abb2bf;\"> create</span><span style=\"color:#eb6772;\"> -n</span><span style=\"color:#abb2bf;\"> pattern_env python=3.8\n</span></code></pre>\n<p>or </p>\n<p>Alternatively, you can activate by using the below CLI: </p>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#5ebfcc;\">source </span><span style=\"color:#eb6772;\">~</span><span style=\"color:#abb2bf;\">/venv_cord19/bin/activate </span><span style=\"font-style:italic;color:#5f697a;\">#or create new venv\n</span><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">pip</span><span style=\"color:#abb2bf;\"> install</span><span style=\"color:#eb6772;\"> -r</span><span style=\"color:#abb2bf;\"> requirements.txt\n</span></code></pre>\n<h3 id=\"step-7-run-pipeline\">Step 7. Run pipeline</h3>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\"> bash cluster_pipeline.sh\n</span></code></pre>\n<h3 id=\"step-8-validating-the-functionality-of-the-nlp-pipeline\">Step 8. Validating the functionality of the NLP pipeline</h3>\n<p>Wait for a bit and then check:</p>\n<h3 id=\"verifying-redis-graph-populated\">Verifying Redis Graph populated:</h3>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">redis-cli -p</span><span style=\"color:#abb2bf;\"> 9001</span><span style=\"color:#eb6772;\"> -h</span><span style=\"color:#abb2bf;\"> 127.0.0.1 GRAPH.QUERY cord19medical </span><span style=\"color:#9acc76;\">&quot;MATCH (n:entity) RETURN count(n) as entity_count&quot; \n</span><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">redis-cli -p</span><span style=\"color:#abb2bf;\"> 9001</span><span style=\"color:#eb6772;\"> -h</span><span style=\"color:#abb2bf;\"> 127.0.0.1 GRAPH.QUERY cord19medical </span><span style=\"color:#9acc76;\">&quot;MATCH (e:entity)-[r]-&gt;(t:entity) RETURN count(r) as edge_count&quot;\n</span></code></pre>\n<h3 id=\"checking-api-responds\">Checking API responds:</h3>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">curl -i -H </span><span style=\"color:#9acc76;\">&quot;Content-Type: application/json&quot;</span><span style=\"color:#eb6772;\"> -X</span><span style=\"color:#abb2bf;\"> POST</span><span style=\"color:#eb6772;\"> -d </span><span style=\"color:#9acc76;\">&#39;{&quot;search&quot;:&quot;How does temperature and humidity affect the transmission of 2019-nCoV&quot;}&#39;      \n</span><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">http://localhost:8080/gsearch\n</span></code></pre>\n<h2 id=\"walkthrough\">Walkthrough</h2>\n<p>While RedisGears allows to deploy and run Machine Learning libraries like <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/AlexMikhalev/cord19redisknowledgegraph/blob/master/spacy_sentences_geared.py\">spacy</a> and <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/AlexMikhalev/cord19redisknowledgegraph/blob/master/tokenizer_bert_geared.py\">BERT transformers</a>, the solution above uses simpler approach:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\"> gb </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">GB</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;KeysReader&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\"> gb.</span><span style=\"color:#eb6772;\">filter</span><span style=\"color:#abb2bf;\">(filter_language)\n</span><span style=\"color:#abb2bf;\"> gb.</span><span style=\"color:#eb6772;\">flatmap</span><span style=\"color:#abb2bf;\">(parse_paragraphs)\n</span><span style=\"color:#abb2bf;\"> gb.</span><span style=\"color:#eb6772;\">map</span><span style=\"color:#abb2bf;\">(spellcheck_sentences)\n</span><span style=\"color:#abb2bf;\"> gb.</span><span style=\"color:#eb6772;\">foreach</span><span style=\"color:#abb2bf;\">(save_sentences)\n</span><span style=\"color:#abb2bf;\"> gb.</span><span style=\"color:#eb6772;\">count</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\"> gb.</span><span style=\"color:#eb6772;\">register</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;paragraphs:*&#39;</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">keyTypes</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">[</span><span style=\"color:#9acc76;\">&#39;string&#39;</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#9acc76;\">&#39;hash&#39;</span><span style=\"color:#abb2bf;\">], </span><span style=\"color:#eb6772;\">mode</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;async_local&quot;</span><span style=\"color:#abb2bf;\">)\n</span></code></pre>\n<p>This is the overall pipeline: those 7 lines allow you to run logic in a distributed cluster or on a single machine using all available CPUs - no changes required until you need to scale over more 1000 nodes. I use KeysReader registered for namespace paragraphs for all strings or hashes. My pipeline would need to run in async mode. For data scientists, I would recommend using gb.run to make sure gears function work and it will run in batch mode and then change it to register - to capture new data. By default, functions will return output, hence the need for count() - to prevent fetching the whole dataset back to the command issuing machine (90 GB for Cord19). </p>\n<p>Overall pre-processing is a straightforward - <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-platform/blob/main/gears_pipeline_sentence_register.py\">full code</a> is here.</p>\n<p>Things to keep in mind:</p>\n<ol>\n<li>Node process can only save locally - we don't move data, anything you want to save should have hashtag, for example to add to the set of processed_docs:</li>\n</ol>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\"> </span><span style=\"color:#eb6772;\">execute</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;SADD&#39;</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#9acc76;\">&#39;processed_docs_{</span><span style=\"color:#db9d63;\">%s</span><span style=\"color:#9acc76;\">}&#39; </span><span style=\"color:#adb7c9;\">% </span><span style=\"color:#eb6772;\">hashtag</span><span style=\"color:#abb2bf;\">(),article_id)\n</span></code></pre>\n<ol start=\"2\">\n<li>Loading external libraries into the computational threat, for example, symspell requires additional dictionaries and needs two steps to load:</li>\n</ol>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\"> </span><span style=\"font-style:italic;color:#5f697a;\">&quot;&quot;&quot;\n</span><span style=\"font-style:italic;color:#5f697a;\"> load symspell and relevant dictionaries\n</span><span style=\"font-style:italic;color:#5f697a;\"> &quot;&quot;&quot;\n</span><span style=\"color:#abb2bf;\"> sym_spell</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">None \n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\"> </span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">load_symspell</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">pkg_resources\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#cd74e8;\">from </span><span style=\"color:#abb2bf;\">symspellpy </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">SymSpell, Verbosity\n</span><span style=\"color:#abb2bf;\">  sym_spell </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">SymSpell</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">max_dictionary_edit_distance</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">1</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">prefix_length</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">7</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">  dictionary_path </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">pkg_resources.</span><span style=\"color:#eb6772;\">resource_filename</span><span style=\"color:#abb2bf;\">(\n</span><span style=\"color:#abb2bf;\">      </span><span style=\"color:#9acc76;\">&quot;symspellpy&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&quot;frequency_dictionary_en_82_765.txt&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">  bigram_path </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">pkg_resources.</span><span style=\"color:#eb6772;\">resource_filename</span><span style=\"color:#abb2bf;\">(\n</span><span style=\"color:#abb2bf;\">      </span><span style=\"color:#9acc76;\">&quot;symspellpy&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&quot;frequency_bigramdictionary_en_243_342.txt&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"font-style:italic;color:#5f697a;\"># term_index is the column of the term and count_index is the\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"font-style:italic;color:#5f697a;\"># column of the term frequency\n</span><span style=\"color:#abb2bf;\">  sym_spell.</span><span style=\"color:#eb6772;\">load_dictionary</span><span style=\"color:#abb2bf;\">(dictionary_path, </span><span style=\"color:#eb6772;\">term_index</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">count_index</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">1</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">  sym_spell.</span><span style=\"color:#eb6772;\">load_bigram_dictionary</span><span style=\"color:#abb2bf;\">(bigram_path, </span><span style=\"color:#eb6772;\">term_index</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">count_index</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">2</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">  </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">sym_spell\n</span></code></pre>\n<ol start=\"3\">\n<li>Scispacy is a great library and data science tool, but after a few iterations with deploying it I ended up reading data model documentation for UMLS Methathesaurus and decided to build Aho-Corasick automata directly from UMLS data. (MRXW_ENG.RRF contains all terms form for English mapped to CUI). Aho-Corasick allowed me to match incoming sentences into pairs of nodes (concepts from the medical dictionary) and present sentences as edges in a graph, Gears related code is simple:</li>\n</ol>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\"> bg = GearsBuilder(&#39;KeysReader&#39;)\n</span><span style=\"color:#abb2bf;\"> bg.foreach(process_item)\n</span><span style=\"color:#abb2bf;\"> bg.count()\n</span><span style=\"color:#abb2bf;\"> bg.register(&#39;sentence:*&#39;,  mode=&quot;async_local&quot;,onRegistered=OnRegisteredAutomata)\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<p>OnRegisteredAutomata will perform similarly to symspell example above except it will download pre-build Aho-Corasick automata (30Mb). \nAho-Corasick is a very fast matcher and allows to perform &gt;900 Mb text per second even on commodity laptop, RedisGears cluster makes a very smooth distribution of data and ML model and matching using available CPU and Memory. Full matcher <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-platform/blob/main/sentences_matcher_register.py\">code</a>.</p>\n<p>Output of the matcher: nodes and edges are candidates to use another RedisGears pattern rgsync where you can write fast into Redis and RedisGears are going to replicate data into slower storage using RedisStreams.\nBut I decided to use streams and handcraft the population of the RedisGraph database, which will be focus of the next blog post.</p>\n<p>Output of the matcher: nodes and edges are candidates to use another RedisGears pattern <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/RedisGears/rgsync\">rgsync</a> where you can write fast into Redis and RedisGears are going to replicate data into slower storage using RedisStreams, while this demo uses streams and populates RedisGraph database with nodes and edges calculating rank of each. </p>\n<h2 id=\"call-to-action\">Call to action</h2>\n<p>We took OCR scans in JSON format and turned them into Knowledge Graph, demonstrating how you can traditional Semantic Network/OWL/Methathesaurus technique based on Unified Medical Language System. Redis Ecosystem offers a lot to the data science community, and can take place at the core of Kaggle notebooks, ML frameworks and make deployment and distribution of data more enjoyable. The success of our industry depends on how our tools work together — regardless of whether they are engineering, data science, machine learning and organisational or architectural.</p>\n<p>With the collaboration of RedisLabs and community, the full pipeline code is available via https://github.com/applied-knowledge-systems/the-pattern-platform. In case, you want to try it locally, then you can find a Docker Launch script in the root of the repository along with short quickstart guide. PR and suggestions are welcome. The overall goal of the project is to allow other to build their more interesting pipeline on top of it. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"http://thepattern.digital/\">Covid19 - Redis Knowledge Graph in 3D</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge\">COVID-19 Open Research Dataset Challenge (CORD-19)</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-platform\">Source Code for NLP pipeline based on RedisGears </a></li>\n</ul>\n"
},{"title": "Metadata Management",
"url": "https://reference-architecture.ai/docs/metadata/",
"body": "<p>In CORD 19 dataset mentioned in <a href=\"./docs/intake\">Data Acquisition</a> Metadata stored in the separate csv file from the source data. <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-platform/blob/2168aa194cc9d84457e3faac0299939e307900ae/parse_publish_dates_threaded.py\">Here</a> simple script to parse date/times and attach it to JSON/XML files</p>\n"
},{"title": "Contribution Guidelines",
"url": "https://reference-architecture.ai/docs/contribution/",
"body": "<p>General guidelines for contributing to the project.</p>\n<span id=\"continue-reading\"></span><h1 id=\"main-goals\">Main goals</h1>\n<h2 id=\"be-data-driven\">Be data-driven</h2>\n<ul>\n<li>Opinion shall be backed by research and data,</li>\n<li>benchmarks by code and deployment scripts</li>\n</ul>\n<h1 id=\"engineering-approach\">Engineering approach</h1>\n<p>There should be a a path to be implemented in a real world - good prototype or production deployment.</p>\n<h1 id=\"how-to-contribute\">How to contribute</h1>\n<p>Welcome pull requests on <a id=\"github\" title=\"Github\" href=\"https://github.com/reference-architecture-ai/reference-architecture.ai/\" target=\"_blank\">\n<span class=\"icon\">\n<i class=\"fab fa-github\"></i>\n</span>\n</a>. Check out supported shortcuts <a href=\"https://reference-architecture.ai/docs/extended-shortcodes/\">Extended Shortcuts</a></p>\n<h1 id=\"licenses\">Licenses</h1>\n<p>When contributing you agreeing to share your contribution under <span class=\"icon-text\"><a href=\"https://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\"><img src=\"https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg\"></a></span></p>\n"
},{"title": "The Pattern: Machine Learning Natural Language Processing meets VR/AR",
"url": "https://reference-architecture.ai/docs/ai-product/",
"body": "<p>To fight ever-increasing complexity, &quot;The Pattern&quot; projects help find relevant knowledge using Artificial Intelligence and novel UX elements, all powered by Redis - a new generation real-time data fabric turned into knowledge fabric</p>\n<p>Overall repository for CORD19 medical NLP pipeline, API and UI, design and architecture.</p>\n<p>Demo Video: <div class=\"youtube is-flex is-justify-content-center is-align-items-center\">\n<iframe\n        width=\"848\" height=\"510\"\n        src=\"https://www.youtube.com/embed/zCqzB0YVgA0\"\n        frameborder=\"0\" \n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n        allowfullscreen>\n</iframe></p>\n</div>\n<p>Demo Server (no persistance): <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://thepattern.digital/\">https://thepattern.digital/</a></p>\n<h1 id=\"the-challenge\">The challenge</h1>\n<p>The medical profession put a lot of effort into collaboration, starting from Latin as a common language to industry-wide thesauruses like <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.nlm.nih.gov/research/umls/index.html\">UMLS</a>. However, if full of scandals where publications in a prestigious journal would be retracted, and the World Health Organisation would change its policy advice based on the article. I think &quot;paper claiming that eating a bat-like Pokémon sparked the spread of COVID-19&quot; takes a prize. One would say that editors in those journals don't do their job, and while it may seem true, I would say they had no chance: with a number of publications about COVID (SARS-V) passing 300+ per day, we need better tools to navigate via such flow of information.\nWhen exploring science or engineering topics, I look at the diversity of the opinion, not the variety of the same cluster of words or the same thought. I want to avoid confirmation bias. I want to find articles relevant to the same concept, not necessarily the ones which have similar words. My focus is to build a natural language processing pipeline capable of handling a large number of documents and concepts, incorporating System 1 AI (fast, intuitive reasoning) and System 2 (high-level reasoning) and then present knowledge in a modern VR/AR visualisation. Search or rather information exploration should be spatial, preferably in VR (memory palace, see Theatre of Giulio Camillo). A force-directed graph is a path towards it, where visuals are assisted by text — relevant text pops up on the connection and where people explore the concepts and then dig deeper into the text. The purpose of the pipeline is that knowledge should be reusable and shareable.</p>\n<h1 id=\"community\">Community</h1>\n<p>Join our community on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://discord.gg/rdgsCuJ4P4\">Discord</a> or post on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern/discussions\">GitHub Discussions</a>](https://github.com/applied-knowledge-systems/the-pattern/discussions)</p>\n"
},{"title": "Support project by contributing",
"url": "https://reference-architecture.ai/docs/donate/",
"body": "<h1 id=\"for-individuals\">For Individuals</h1>\n<p>This is a begging of an exciting, incredible new journey; support open source projects by donating or contributing.</p>\n<h1 id=\"for-organisations\">For Organisations</h1>\n<p>Becomes a sponsor and promote Reference Architecture for AI.</p>\n<p>The ask is </p>\n<ul>\n<li>Monetary to support project hosting and maintenance costs</li>\n<li>Credits for enterprise </li>\n<li>Contribute and review proposed architectures, benchmarks, and deployment guides, be ready to stand your ground and defend trade-offs in the presence of industry-leading architects, engineers, and competitors</li>\n<li>Help promote and market reference architecture for AI</li>\n</ul>\n<h1 id=\"donate\">Donate</h1>\n<ul>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/sponsors/applied-knowledge-systems\"><img src=\"https://img.shields.io/static/v1?label=Github&amp;message=%E2%9D%A4&amp;logo=GitHub&amp;color=%23fe8e86\" alt=\"\" /></a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.patreon.com/applied_knowledge_systems\"><img src=\"https://img.shields.io/static/v1?label=Patreon&amp;message=%E2%9D%A4&amp;logo=Patreon&amp;color=%23fe8e86\" alt=\"\" /></a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://opencollective.com/applied-knowledge-systems\"><img src=\"https://img.shields.io/static/v1?label=opencollective&amp;message=%E2%9D%A4&amp;logo=OpenCollective&amp;color=%23fe8e86\" alt=\"\" /></a></li>\n</ul>\n"
},{"title": "Data Acquisition",
"url": "https://reference-architecture.ai/docs/intake/",
"body": "<p>For the Reference Architecture for AI, we used Kaggle <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://www.kaggle.com/datasets/allen-institute-for-ai/CORD-19-research-challenge\">Cord19 dataset</a>, &quot;COVID-19 Open Research Dataset (CORD-19). CORD-19 is a resource of over 1,000,000 scholarly articles, including over 400,000 with full text, about COVID-19, SARS-CoV-2, and related coronaviruses. This freely available dataset is provided to the global research community to apply recent advances in natural language processing and other AI techniques to generate new insights in support of the ongoing fight against this infectious disease.&quot;</p>\n<h1 id=\"ingest-documents\">Ingest documents</h1>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-platform/blob/6fe80e7bf6c8c3baf2d1bd6aa300ff1ef336d523/RedisIntakeRedisClusterSample.py\">Example script</a> parses documents taking out body_text and saves under paragraphs in Redis cluster.</p>\n"
},{"title": "Extended Shortcodes",
"url": "https://reference-architecture.ai/docs/extended-shortcodes/",
"body": "<p>DeepThought theme provides multiple shortcodes on top of built-in ones in Zola.\nPlease, have a look at the <a href=\"/docs/config-options#external-libraries\">Config Options</a>\nthat explains how to enable them.</p>\n<span id=\"continue-reading\"></span><h1 id=\"basic-zola-shortcodes\">Basic Zola shortcodes</h1>\n<p>Embed gist:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{{ gist(url=&quot;https://gist.github.com/Keats/e5fb6aad409f28721c0ba14161644c57&quot;, class=&quot;gist&quot;) }}\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<div class=\"gist\">\n    <script src=\"https:&#x2F;&#x2F;gist.github.com&#x2F;Keats&#x2F;e5fb6aad409f28721c0ba14161644c57.js\"></script>\n</div>\n<h1 id=\"mermaid\">Mermaid</h1>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://mermaidjs.github.io/\">Mermaid</a> is a library helping you to generate diagrams and flowcharts from text in a similar manner as Markdown.</p>\n<h2 id=\"flowchart\">Flowchart</h2>\n<p>To put a flowchart in your post, use the below snippet</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% mermaid() %}\n</span><span style=\"color:#abb2bf;\">graph TD;\n</span><span style=\"color:#abb2bf;\">    A--&gt;B;\n</span><span style=\"color:#abb2bf;\">    A--&gt;C;\n</span><span style=\"color:#abb2bf;\">    B--&gt;D;\n</span><span style=\"color:#abb2bf;\">    C--&gt;D;\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">graph TD;\nA--&gt;B;\nA--&gt;C;\nB--&gt;D;\nC--&gt;D;</div>\n<h2 id=\"sequence-diagram\">Sequence Diagram</h2>\n<p>To put a sequence diagram in your post use below snippet</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% mermaid() %}\n</span><span style=\"color:#abb2bf;\">sequenceDiagram\n</span><span style=\"color:#abb2bf;\">  participant Alice\n</span><span style=\"color:#abb2bf;\">  participant Bob\n</span><span style=\"color:#abb2bf;\">  Alice-&gt;&gt;John: Hello John, how are you?\n</span><span style=\"color:#abb2bf;\">  loop Healthcheck\n</span><span style=\"color:#abb2bf;\">    John-&gt;&gt;John: Fight against hypochondria\n</span><span style=\"color:#abb2bf;\">  end\n</span><span style=\"color:#abb2bf;\">  Note right of John: Rational thoughts &lt;br/&gt;prevail!\n</span><span style=\"color:#abb2bf;\">  John--&gt;&gt;Alice: Great!\n</span><span style=\"color:#abb2bf;\">  John-&gt;&gt;Bob: How about you?\n</span><span style=\"color:#abb2bf;\">  Bob--&gt;&gt;John: Jolly good!\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">sequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</div>\n<h2 id=\"gantt-diagram\">Gantt diagram</h2>\n<p>To put a gantt diagram in your post use below snippet</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% mermaid() %}\n</span><span style=\"color:#abb2bf;\">gantt\n</span><span style=\"color:#abb2bf;\">  dateFormat YYYY-MM-DD\n</span><span style=\"color:#abb2bf;\">  title Adding GANTT diagram to mermaid\n</span><span style=\"color:#abb2bf;\">  excludes weekdays 2014-01-10\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">  section A section\n</span><span style=\"color:#abb2bf;\">  Completed task :done, des1, 2014-01-06,2014-01-08\n</span><span style=\"color:#abb2bf;\">  Active task :active, des2, 2014-01-09, 3d\n</span><span style=\"color:#abb2bf;\">  Future task : des3, after des2, 5d\n</span><span style=\"color:#abb2bf;\">  Future task2 : des4, after des3, 5d\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">gantt\n  dateFormat YYYY-MM-DD\n  title Adding GANTT diagram to mermaid\n  excludes weekdays 2014-01-10\n\n  section A section\n  Completed task :done, des1, 2014-01-06,2014-01-08\n  Active task :active, des2, 2014-01-09, 3d\n  Future task : des3, after des2, 5d\n  Future task2 : des4, after des3, 5d</div>\n<h2 id=\"class-diagram-experimental\">Class diagram - experimental</h2>\n<p>To put a class diagram in your post use below snippet</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% mermaid() %}\n</span><span style=\"color:#abb2bf;\">classDiagram\n</span><span style=\"color:#abb2bf;\">  Class01 &lt;|-- AveryLongClass : Cool\n</span><span style=\"color:#abb2bf;\">  Class03 _-- Class04\n</span><span style=\"color:#abb2bf;\">  Class05 o-- Class06\n</span><span style=\"color:#abb2bf;\">  Class07 .. Class08\n</span><span style=\"color:#abb2bf;\">  Class09 --&gt; C2 : Where am i?\n</span><span style=\"color:#abb2bf;\">  Class09 --_ C3\n</span><span style=\"color:#abb2bf;\">  Class09 --|&gt; Class07\n</span><span style=\"color:#abb2bf;\">  Class07 : equals()\n</span><span style=\"color:#abb2bf;\">  Class07 : Object[] elementData\n</span><span style=\"color:#abb2bf;\">  Class01 : size()\n</span><span style=\"color:#abb2bf;\">  Class01 : int chimp\n</span><span style=\"color:#abb2bf;\">  Class01 : int gorilla\n</span><span style=\"color:#abb2bf;\">  Class08 &lt;--&gt; C2: Cool label\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">classDiagram\n  Class01 &lt;|-- AveryLongClass : Cool\n  Class03 _-- Class04\n  Class05 o-- Class06\n  Class07 .. Class08\n  Class09 --&gt; C2 : Where am i?\n  Class09 --_ C3\n  Class09 --|&gt; Class07\n  Class07 : equals()\n  Class07 : Object[] elementData\n  Class01 : size()\n  Class01 : int chimp\n  Class01 : int gorilla\n  Class08 &lt;--&gt; C2: Cool label</div>\n<h2 id=\"entity-relationship-diagram-experimental\">Entity Relationship Diagram - experimental</h2>\n<p>To put an ER diagram in your post use below snippet\n<strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% mermaid() %}\n</span><span style=\"color:#abb2bf;\">erDiagram\n</span><span style=\"color:#abb2bf;\">    CUSTOMER ||--o{ ORDER : places\n</span><span style=\"color:#abb2bf;\">    ORDER ||--|{ LINE-ITEM : contains\n</span><span style=\"color:#abb2bf;\">    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</div>\n<h2 id=\"user-journey-diagram\">User Journey Diagram</h2>\n<p>To put an user journey diagram in your post use below snippet\n<strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% mermaid() %}\n</span><span style=\"color:#abb2bf;\">  journey\n</span><span style=\"color:#abb2bf;\">  title My working day\n</span><span style=\"color:#abb2bf;\">  section Go to work\n</span><span style=\"color:#abb2bf;\">  Make tea: 5: Me\n</span><span style=\"color:#abb2bf;\">  Go upstairs: 3: Me\n</span><span style=\"color:#abb2bf;\">  Do work: 1: Me, Cat\n</span><span style=\"color:#abb2bf;\">  section Go home\n</span><span style=\"color:#abb2bf;\">  Go downstairs: 5: Me\n</span><span style=\"color:#abb2bf;\">  Sit down: 5: Me\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">journey\n  title My working day\n  section Go to work\n  Make tea: 5: Me\n  Go upstairs: 3: Me\n  Do work: 1: Me, Cat\n  section Go home\n  Go downstairs: 5: Me\n  Sit down: 5: Me</div>\n<h1 id=\"chart\">Chart</h1>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://timqian.com/chart.xkcd/\">Chart.xkcd</a> is a chart library plots “sketchy”, “cartoony” or “hand-drawn” styled charts.</p>\n<h2 id=\"line-chart\">Line chart</h2>\n<p>Line chart displays series of data points in the form of lines. It can be used to show trend data, or comparison of different data sets.</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% chart() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;type&quot;: &quot;Line&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;title&quot;: &quot;Monthly income of an indie developer&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;xLabel&quot;: &quot;Month&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;yLabel&quot;: &quot;$ Dollars&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;data&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;labels&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;],\n</span><span style=\"color:#abb2bf;\">    &quot;datasets&quot;: [\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Plan&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [30, 70, 200, 300, 500, 800, 1500, 2900, 5000, 8000]\n</span><span style=\"color:#abb2bf;\">      },\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Reality&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [0, 1, 30, 70, 80, 100, 50, 80, 40, 150]\n</span><span style=\"color:#abb2bf;\">      }\n</span><span style=\"color:#abb2bf;\">    ]\n</span><span style=\"color:#abb2bf;\">  }\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<svg class=\"chart\">{\n  \"type\": \"Line\",\n  \"title\": \"Monthly income of an indie developer\",\n  \"xLabel\": \"Month\",\n  \"yLabel\": \"$ Dollars\",\n  \"data\": {\n    \"labels\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    \"datasets\": [\n      {\n        \"label\": \"Plan\",\n        \"data\": [30, 70, 200, 300, 500, 800, 1500, 2900, 5000, 8000]\n      },\n      {\n        \"label\": \"Reality\",\n        \"data\": [0, 1, 30, 70, 80, 100, 50, 80, 40, 150]\n      }\n    ]\n  }\n}</svg>\n<h2 id=\"xy-chart\">XY chart</h2>\n<p>XY chart is used to plot points by specifying their XY coordinates.</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% chart() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;type&quot;: &quot;XY&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;title&quot;: &quot;Pokemon farms&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;xLabel&quot;: &quot;Coordinate&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;yLabel&quot;: &quot;Count&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;data&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;datasets&quot;: [\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Pikachu&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 3,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 10\n</span><span style=\"color:#abb2bf;\">          },\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 4,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 122\n</span><span style=\"color:#abb2bf;\">          },\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 10,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 100\n</span><span style=\"color:#abb2bf;\">          }\n</span><span style=\"color:#abb2bf;\">        ]\n</span><span style=\"color:#abb2bf;\">      },\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Squirtle&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 1,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 1\n</span><span style=\"color:#abb2bf;\">          },\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 3,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 3\n</span><span style=\"color:#abb2bf;\">          }\n</span><span style=\"color:#abb2bf;\">        ]\n</span><span style=\"color:#abb2bf;\">      },\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Charizard&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 2,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 5\n</span><span style=\"color:#abb2bf;\">          },\n</span><span style=\"color:#abb2bf;\">          {\n</span><span style=\"color:#abb2bf;\">            &quot;x&quot;: 6,\n</span><span style=\"color:#abb2bf;\">            &quot;y&quot;: 8\n</span><span style=\"color:#abb2bf;\">          }\n</span><span style=\"color:#abb2bf;\">        ]\n</span><span style=\"color:#abb2bf;\">      }\n</span><span style=\"color:#abb2bf;\">    ]\n</span><span style=\"color:#abb2bf;\">  },\n</span><span style=\"color:#abb2bf;\">  &quot;options&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;xTickCount&quot;: 5,\n</span><span style=\"color:#abb2bf;\">    &quot;yTickCount&quot;: 5,\n</span><span style=\"color:#abb2bf;\">    &quot;showLine&quot;: false,\n</span><span style=\"color:#abb2bf;\">    &quot;dotSize&quot;: 1\n</span><span style=\"color:#abb2bf;\">  }\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<svg class=\"chart\">{\n  \"type\": \"XY\",\n  \"title\": \"Pokemon farms\",\n  \"xLabel\": \"Coordinate\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"datasets\": [\n      {\n        \"label\": \"Pikachu\",\n        \"data\": [\n          {\n            \"x\": 3,\n            \"y\": 10\n          },\n          {\n            \"x\": 4,\n            \"y\": 122\n          },\n          {\n            \"x\": 10,\n            \"y\": 100\n          }\n        ]\n      },\n      {\n        \"label\": \"Squirtle\",\n        \"data\": [\n          {\n            \"x\": 1,\n            \"y\": 1\n          },\n          {\n            \"x\": 3,\n            \"y\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"Charizard\",\n        \"data\": [\n          {\n            \"x\": 2,\n            \"y\": 5\n          },\n          {\n            \"x\": 6,\n            \"y\": 8\n          }\n        ]\n      }\n    ]\n  },\n  \"options\": {\n    \"xTickCount\": 5,\n    \"yTickCount\": 5,\n    \"showLine\": false,\n    \"dotSize\": 1\n  }\n}</svg>\n<h2 id=\"bar-chart\">Bar chart</h2>\n<p>A bar chart provides a way of showing data values represented as vertical bars</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% chart() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;type&quot;: &quot;Bar&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;title&quot;: &quot;How to feel powerful ?&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;xLabel&quot;: &quot;Platforms&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;yLabel&quot;: &quot;Count&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;data&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;labels&quot;: [&quot;Earn Money&quot;, &quot;Get Famous&quot;, &quot;Use terminal in front of non-programmers&quot;],\n</span><span style=\"color:#abb2bf;\">    &quot;datasets&quot;: [\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [30, 45, 100]\n</span><span style=\"color:#abb2bf;\">      }\n</span><span style=\"color:#abb2bf;\">    ]\n</span><span style=\"color:#abb2bf;\">  },\n</span><span style=\"color:#abb2bf;\">  &quot;options&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;yTickCount&quot;: 2,\n</span><span style=\"color:#abb2bf;\">    &quot;dataColors&quot;: [&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;]\n</span><span style=\"color:#abb2bf;\">  }\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<svg class=\"chart\">{\n  \"type\": \"Bar\",\n  \"title\": \"How to feel powerful ?\",\n  \"xLabel\": \"Platforms\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"labels\": [\"Earn Money\", \"Get Famous\", \"Use terminal in front of non-programmers\"],\n    \"datasets\": [\n      {\n        \"data\": [30, 45, 100]\n      }\n    ]\n  },\n  \"options\": {\n    \"yTickCount\": 2,\n    \"dataColors\": [\"Red\", \"Green\", \"Blue\"]\n  }\n}</svg>\n<h2 id=\"stacked-bar-chart\">Stacked bar chart</h2>\n<p>A stacked bar chart provides a way of showing data values represented as vertical bars</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% chart() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;type&quot;: &quot;StackedBar&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;title&quot;: &quot;Issues and PR Submissions&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;xLabel&quot;: &quot;Month&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;yLabel&quot;: &quot;Count&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;data&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;labels&quot;: [&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;April&quot;, &quot;May&quot;],\n</span><span style=\"color:#abb2bf;\">    &quot;datasets&quot;: [\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Issues&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [12, 19, 11, 29, 17]\n</span><span style=\"color:#abb2bf;\">      },\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;PRs&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [3, 5, 2, 4, 1]\n</span><span style=\"color:#abb2bf;\">      },\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;Merges&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [2, 3, 0, 1, 1]\n</span><span style=\"color:#abb2bf;\">      }\n</span><span style=\"color:#abb2bf;\">    ]\n</span><span style=\"color:#abb2bf;\">  }\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<svg class=\"chart\">{\n  \"type\": \"StackedBar\",\n  \"title\": \"Issues and PR Submissions\",\n  \"xLabel\": \"Month\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"labels\": [\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\"],\n    \"datasets\": [\n      {\n        \"label\": \"Issues\",\n        \"data\": [12, 19, 11, 29, 17]\n      },\n      {\n        \"label\": \"PRs\",\n        \"data\": [3, 5, 2, 4, 1]\n      },\n      {\n        \"label\": \"Merges\",\n        \"data\": [2, 3, 0, 1, 1]\n      }\n    ]\n  }\n}</svg>\n<h2 id=\"pie-doughnut-chart\">Pie/Doughnut chart</h2>\n<p>A pie/doughnut chart provides a way of illustrating numerical proportion.</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% chart() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;type&quot;: &quot;Pie&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;title&quot;: &quot;What Tim is made of&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;data&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;labels&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;],\n</span><span style=\"color:#abb2bf;\">    &quot;datasets&quot;: [\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [500, 200, 80, 90, 100]\n</span><span style=\"color:#abb2bf;\">      }\n</span><span style=\"color:#abb2bf;\">    ]\n</span><span style=\"color:#abb2bf;\">  }\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<svg class=\"chart\">{\n  \"type\": \"Pie\",\n  \"title\": \"What Tim is made of\",\n  \"data\": {\n    \"labels\": [\"a\", \"b\", \"e\", \"f\", \"g\"],\n    \"datasets\": [\n      {\n        \"data\": [500, 200, 80, 90, 100]\n      }\n    ]\n  }\n}</svg>\n<h2 id=\"radar-chart\">Radar chart</h2>\n<p>A radar chart provides a way of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point.</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% chart() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;type&quot;: &quot;Radar&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;title&quot;: &quot;Letters in random words&quot;,\n</span><span style=\"color:#abb2bf;\">  &quot;data&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;labels&quot;: [&quot;c&quot;, &quot;h&quot;, &quot;a&quot;, &quot;r&quot;, &quot;t&quot;],\n</span><span style=\"color:#abb2bf;\">    &quot;datasets&quot;: [\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;ccharrrt&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [2, 1, 1, 3, 1]\n</span><span style=\"color:#abb2bf;\">      },\n</span><span style=\"color:#abb2bf;\">      {\n</span><span style=\"color:#abb2bf;\">        &quot;label&quot;: &quot;chhaart&quot;,\n</span><span style=\"color:#abb2bf;\">        &quot;data&quot;: [1, 2, 2, 1, 1]\n</span><span style=\"color:#abb2bf;\">      }\n</span><span style=\"color:#abb2bf;\">    ]\n</span><span style=\"color:#abb2bf;\">  },\n</span><span style=\"color:#abb2bf;\">  &quot;options&quot;: {\n</span><span style=\"color:#abb2bf;\">    &quot;showLegend&quot;: true,\n</span><span style=\"color:#abb2bf;\">    &quot;showLabels&quot;: true\n</span><span style=\"color:#abb2bf;\">  }\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<svg class=\"chart\">{\n  \"type\": \"Radar\",\n  \"title\": \"Letters in random words\",\n  \"data\": {\n    \"labels\": [\"c\", \"h\", \"a\", \"r\", \"t\"],\n    \"datasets\": [\n      {\n        \"label\": \"ccharrrt\",\n        \"data\": [2, 1, 1, 3, 1]\n      },\n      {\n        \"label\": \"chhaart\",\n        \"data\": [1, 2, 2, 1, 1]\n      }\n    ]\n  },\n  \"options\": {\n    \"showLegend\": true,\n    \"showLabels\": true\n  }\n}</svg>\n<h1 id=\"galleria\">Galleria</h1>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://galleriajs.github.io/\">Galleria</a> is a framework that simplifies the process of creating beautiful image galleries for the web and mobile devices.</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% galleria() %}\n</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">  &quot;images&quot;: [\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;alexandre-dinaut-GHxr3O6yZ1c-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Clouds &amp; Mountains&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Just hanging out with each other.&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;chandler-cruttenden-YYemke7BfuE-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Crop&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Waiting for the harvest.&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;jung-ho-park-7aZtpsyaWVM-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;The Fog&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Engulfing everything.&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;kitera-dent-BIj4LObC6es-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Just Plants&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Backdrop of ocean.&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;koes-nadi-XkUFF1nnbA8-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Whoa&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Something to look at.&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;lazyartistgallery-HHaIRbgzcGw-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Let&#39;s Chill&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Three birds just chilling !!&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;saira-nUxdL_19OQw-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Canyon&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Might of nature.&quot;\n</span><span style=\"color:#abb2bf;\">    },\n</span><span style=\"color:#abb2bf;\">    {\n</span><span style=\"color:#abb2bf;\">      &quot;src&quot;: &quot;waldemar-brandt-2hAEHCt25eM-unsplash.jpg&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;title&quot;: &quot;Evening&quot;,\n</span><span style=\"color:#abb2bf;\">      &quot;description&quot;: &quot;Time to wind down.&quot;\n</span><span style=\"color:#abb2bf;\">    }\n</span><span style=\"color:#abb2bf;\">  ]\n</span><span style=\"color:#abb2bf;\">}\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<div class=\"galleria mb-6\" style=\"height: 450px\">{\n  \"images\": [\n    {\n      \"src\": \"alexandre-dinaut-GHxr3O6yZ1c-unsplash.jpg\",\n      \"title\": \"Clouds & Mountains\",\n      \"description\": \"Just hanging out with each other.\"\n    },\n    {\n      \"src\": \"chandler-cruttenden-YYemke7BfuE-unsplash.jpg\",\n      \"title\": \"Crop\",\n      \"description\": \"Waiting for the harvest.\"\n    },\n    {\n      \"src\": \"jung-ho-park-7aZtpsyaWVM-unsplash.jpg\",\n      \"title\": \"The Fog\",\n      \"description\": \"Engulfing everything.\"\n    },\n    {\n      \"src\": \"kitera-dent-BIj4LObC6es-unsplash.jpg\",\n      \"title\": \"Just Plants\",\n      \"description\": \"Backdrop of ocean.\"\n    },\n    {\n      \"src\": \"koes-nadi-XkUFF1nnbA8-unsplash.jpg\",\n      \"title\": \"Whoa\",\n      \"description\": \"Something to look at.\"\n    },\n    {\n      \"src\": \"lazyartistgallery-HHaIRbgzcGw-unsplash.jpg\",\n      \"title\": \"Let's Chill\",\n      \"description\": \"Three birds just chilling !!\"\n    },\n    {\n      \"src\": \"saira-nUxdL_19OQw-unsplash.jpg\",\n      \"title\": \"Canyon\",\n      \"description\": \"Might of nature.\"\n    },\n    {\n      \"src\": \"waldemar-brandt-2hAEHCt25eM-unsplash.jpg\",\n      \"title\": \"Evening\",\n      \"description\": \"Time to wind down.\"\n    }\n  ]\n}</div>\n<h1 id=\"katex\">KaTeX</h1>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://katex.org/\">KaTeX</a> is a math typesetting library based on TeX.</p>\n<p><strong>Code</strong></p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">{% katex(block=true) %}\n</span><span style=\"color:#abb2bf;\">\\KaTeX\n</span><span style=\"color:#abb2bf;\">{% end %}\n</span></code></pre>\n<p><strong>Output</strong></p>\n<script type=\"math/tex;mode=display\">\\KaTeX</script>\n<p><strong>Photo By:</strong></p>\n<ul>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@alexdinaut?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">ALEXANDRE DINAUT</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@alexdinaut?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@chanphoto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Chandler Cruttenden</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@chanphoto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@mylovefromjesus?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jung Ho Park</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@mylovefromjesus?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@kitera?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Kitera Dent</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@kitera?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@bangkoes?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Koes nadi</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@bangkoes?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@rahulp9800?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Lazyartistgallery</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@rahulp9800?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@sairaa?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Saira</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@sairaa?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n<li><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@waldemarbrandt67w?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Waldemar Brandt</a> on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://unsplash.com/@waldemarbrandt67w?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></li>\n</ul>\n"
},{"title": "Turning Open Source project into Product with Redis Enterprise",
"url": "https://reference-architecture.ai/posts/github-oauth2/",
"body": "<h1 id=\"turning-open-source-project-into-product-with-redis-enterprise\">Turning Open Source project into Product with Redis Enterprise</h1>\n<h1 id=\"overview\">Overview</h1>\n<h1 id=\"background\">Background</h1>\n<h2 id=\"history\">History</h2>\n<p>Last year, my reference project, &quot;The Pattern&quot;, was the hackathon winner 2021 and got a bit of publicity and, in total, seven forks. But as with many open source projects, it is now stale. Time to revive &quot;The Pattern&quot; with new features and GitHub sponsors or Patreon patrons to help and inspire developers and creatives. In return, it's common to provide sponsor-only features and articles. Nevertheless, how can we do it with a large Redis-based machine learning pipeline?</p>\n<h2 id=\"plan-sponsor-only-features\">Plan sponsor only features</h2>\n<p>This article will introduce a simple first step:\nfor GitHub sponsors, we start with offering persistent storage of preferences: I have a simple flask POST API which adds nodes into the user's preference storage - a simple Redis set per user. And it will be a foundation to build other sponsor-only features.\nFor now, let's cover the basics:</p>\n<h1 id=\"overall-architecture-overview\">Overall architecture overview</h1>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">flowchart LR\n    id1(User) --&gt; flask_login(Flask Login API)--&gt; github(GitHub OAuth2)\n    github--&gt;flask_callback(Flask API callback)--&gt;GitHubGraphQL(GitHub GraphQL)</div>\n<h2 id=\"add-github-oauth2-to-rest-api\">Add Github oauth2 to Rest API</h2>\n<p>There are a number of API's that GitHub offers to help developers, but the GitHub Authentication API is one of the most popular. This API allows you to log in to GitHub using your username and password, or OAuth token.</p>\n<p>A login button with a standard OIDC/OAuth2 dance is one of the most common ways for a user to authenticate to an API.\nBelow is code taken from this <a href=\"(https://gist.github.com/xros/aba970d1098d916200d0acce8feb0251)\">gist</a> and is very common for OAuth2 flows:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">os \n</span><span style=\"color:#abb2bf;\">client_id </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;GITHUB_CLIENT_ID&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">client_secret </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;GITHUB_SECRET&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">@app.</span><span style=\"color:#eb6772;\">route</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;/&#39;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">methods</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">[</span><span style=\"color:#9acc76;\">&#39;GET&#39;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#9acc76;\">&#39;POST&#39;</span><span style=\"color:#abb2bf;\">])\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">index</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">    url </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#9acc76;\">&#39;https://github.com/login/oauth/authorize&#39;\n</span><span style=\"color:#abb2bf;\">    params </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;client_id&#39;</span><span style=\"color:#abb2bf;\">: client_id,\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;scope&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&#39;read:user,read:email&#39;</span><span style=\"color:#abb2bf;\">,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;state&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">uuid4</span><span style=\"color:#abb2bf;\">().hex),\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;allow_signup&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&#39;true&#39;\n</span><span style=\"color:#abb2bf;\">    }\n</span><span style=\"color:#abb2bf;\">    url </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">furl</span><span style=\"color:#abb2bf;\">(url).</span><span style=\"color:#eb6772;\">set</span><span style=\"color:#abb2bf;\">(params)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#eb6772;\">redirect</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(url), </span><span style=\"color:#db9d63;\">302</span><span style=\"color:#abb2bf;\">)\n</span></code></pre>\n<p>where GITHUB_CLIENT_ID and GITHUB_SECRET are client/secret GitHub Oauth2 apps. Register for following process on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/settings/applications/new\">GitHub</a></p>\n<ul>\n<li>On callback:\n<ul>\n<li>Fetch username, email, and other profile information- in case we need to contact them</li>\n<li>get the status of the user - if they are sponsor of the organisation\n<ul>\n<li>if they are sponsor </li>\n<li>add the username to the set of sponsors in Redis</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\">org_name</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;applied-knowledge-systems&quot;\n</span><span style=\"color:#abb2bf;\">@app.</span><span style=\"color:#eb6772;\">route</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;/oauth2/callback&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">oauth2_callback</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    code </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">request.args.</span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;code&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    access_token_url </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#9acc76;\">&#39;https://github.com/login/oauth/access_token&#39;\n</span><span style=\"color:#abb2bf;\">    payload </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;client_id&#39;</span><span style=\"color:#abb2bf;\">: client_id,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;client_secret&#39;</span><span style=\"color:#abb2bf;\">: client_secret,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;code&#39;</span><span style=\"color:#abb2bf;\">: code,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"font-style:italic;color:#5f697a;\"># &#39;redirect_uri&#39;:\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;state&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">uuid4</span><span style=\"color:#abb2bf;\">().hex)\n</span><span style=\"color:#abb2bf;\">    }\n</span><span style=\"color:#abb2bf;\">    r </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">requests.</span><span style=\"color:#eb6772;\">post</span><span style=\"color:#abb2bf;\">(access_token_url, </span><span style=\"color:#eb6772;\">json</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">payload, </span><span style=\"color:#eb6772;\">headers</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">{</span><span style=\"color:#9acc76;\">&#39;Accept&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&#39;application/json&#39;</span><span style=\"color:#abb2bf;\">})\n</span><span style=\"color:#abb2bf;\">    access_token </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">json.</span><span style=\"color:#eb6772;\">loads</span><span style=\"color:#abb2bf;\">(r.text).</span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;access_token&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#5ebfcc;\">print</span><span style=\"color:#abb2bf;\">(access_token)\n</span><span style=\"color:#abb2bf;\">    \n</span><span style=\"color:#abb2bf;\">    access_user_url </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#9acc76;\">&#39;https://api.github.com/user&#39;\n</span><span style=\"color:#abb2bf;\">    response </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">requests.</span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\">(access_user_url, </span><span style=\"color:#eb6772;\">headers</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">{</span><span style=\"color:#9acc76;\">&#39;Authorization&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&#39;token &#39; </span><span style=\"color:#adb7c9;\">+ </span><span style=\"color:#abb2bf;\">access_token})\n</span><span style=\"color:#abb2bf;\">    data</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">response.</span><span style=\"color:#eb6772;\">json</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">    user_email</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">data[</span><span style=\"color:#9acc76;\">&quot;email&quot;</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    user_login</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">data[</span><span style=\"color:#9acc76;\">&quot;login&quot;</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    user_id</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">data[</span><span style=\"color:#9acc76;\">&quot;id&quot;</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># response=redirect(url_for(&#39;login&#39;,next=redirect_url()))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># response.set_cookie(&#39;user_id&#39;, str(user_id))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># response.set_cookie(&#39;user_login&#39;, str(user_login))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># return response\n</span><span style=\"color:#abb2bf;\">    query </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#9acc76;\">&quot;&quot;&quot;\n</span><span style=\"color:#9acc76;\">        {\n</span><span style=\"color:#9acc76;\">        viewer {\n</span><span style=\"color:#9acc76;\">            sponsorshipsAsSponsor(first: 100) {\n</span><span style=\"color:#9acc76;\">            nodes {\n</span><span style=\"color:#9acc76;\">                sponsorable {\n</span><span style=\"color:#9acc76;\">                ... on User {\n</span><span style=\"color:#9acc76;\">                    id\n</span><span style=\"color:#9acc76;\">                    email\n</span><span style=\"color:#9acc76;\">                    url\n</span><span style=\"color:#9acc76;\">                }\n</span><span style=\"color:#9acc76;\">                ... on Organization {\n</span><span style=\"color:#9acc76;\">                    id\n</span><span style=\"color:#9acc76;\">                    email\n</span><span style=\"color:#9acc76;\">                    name\n</span><span style=\"color:#9acc76;\">                    url\n</span><span style=\"color:#9acc76;\">                }\n</span><span style=\"color:#9acc76;\">                }\n</span><span style=\"color:#9acc76;\">                tier {\n</span><span style=\"color:#9acc76;\">                id\n</span><span style=\"color:#9acc76;\">                name\n</span><span style=\"color:#9acc76;\">                monthlyPriceInDollars\n</span><span style=\"color:#9acc76;\">                monthlyPriceInCents\n</span><span style=\"color:#9acc76;\">                }\n</span><span style=\"color:#9acc76;\">            }\n</span><span style=\"color:#9acc76;\">            }\n</span><span style=\"color:#9acc76;\">        }\n</span><span style=\"color:#9acc76;\">        }\n</span><span style=\"color:#9acc76;\">        &quot;&quot;&quot;\n</span><span style=\"color:#abb2bf;\">    response_graphql </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">requests.</span><span style=\"color:#eb6772;\">post</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;https://api.github.com/graphql&#39;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">json</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">{</span><span style=\"color:#9acc76;\">&#39;query&#39;</span><span style=\"color:#abb2bf;\">: query}, </span><span style=\"color:#eb6772;\">headers</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">{</span><span style=\"color:#9acc76;\">&#39;Authorization&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&#39;token &#39; </span><span style=\"color:#adb7c9;\">+ </span><span style=\"color:#abb2bf;\">access_token})\n</span><span style=\"color:#abb2bf;\">    response_graphql_data</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">response_graphql.</span><span style=\"color:#eb6772;\">json</span><span style=\"color:#abb2bf;\">()[</span><span style=\"color:#9acc76;\">&quot;data&quot;</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if </span><span style=\"color:#5ebfcc;\">isinstance </span><span style=\"color:#abb2bf;\">(response_graphql_data[</span><span style=\"color:#9acc76;\">&quot;viewer&quot;</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#9acc76;\">&quot;sponsorshipsAsSponsor&quot;</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#9acc76;\">&quot;nodes&quot;</span><span style=\"color:#abb2bf;\">], list):\n</span><span style=\"color:#abb2bf;\">      </span><span style=\"color:#cd74e8;\">if </span><span style=\"color:#abb2bf;\">response_graphql_data[</span><span style=\"color:#9acc76;\">&quot;viewer&quot;</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#9acc76;\">&quot;sponsorshipsAsSponsor&quot;</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#9acc76;\">&quot;nodes&quot;</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#db9d63;\">0</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#9acc76;\">&quot;sponsorable&quot;</span><span style=\"color:#abb2bf;\">][</span><span style=\"color:#9acc76;\">&quot;name&quot;</span><span style=\"color:#abb2bf;\">]</span><span style=\"color:#adb7c9;\">==</span><span style=\"color:#abb2bf;\">org_name:\n</span><span style=\"color:#abb2bf;\">          </span><span style=\"font-style:italic;color:#5f697a;\"># if user is a sponsor of Applied Knowledge System add them to set of sponsors\n</span><span style=\"color:#abb2bf;\">         redis_client.</span><span style=\"color:#eb6772;\">sadd</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&#39;sponsors:</span><span style=\"color:#abb2bf;\">{org_name}</span><span style=\"color:#9acc76;\">&#39;</span><span style=\"color:#abb2bf;\">,user_id)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># if RedisJSON enabled:\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># redis_client.json().set(f&quot;user_details:{user_id}&quot;, &#39;$&#39;, {\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\">#     &#39;email&#39;: user_email,\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\">#     &#39;id&#39;: user_id,\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\">#     &#39;user_login&#39;: user_login,\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\">#     &#39;graphql&#39;: response_graphql_data,\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># }) \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\">#if not\n</span><span style=\"color:#abb2bf;\">    redis_client.</span><span style=\"color:#eb6772;\">hset</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&quot;user_details:</span><span style=\"color:#abb2bf;\">{user_id}</span><span style=\"color:#9acc76;\">&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">mapping</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">{\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;email&#39;</span><span style=\"color:#abb2bf;\">: user_email,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;id&#39;</span><span style=\"color:#abb2bf;\">: user_id,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;user_login&#39;</span><span style=\"color:#abb2bf;\">: user_login\n</span><span style=\"color:#abb2bf;\">    })\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#eb6772;\">jsonify</span><span style=\"color:#abb2bf;\">({\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;status&#39;</span><span style=\"color:#abb2bf;\">: </span><span style=\"color:#9acc76;\">&#39;success&#39;</span><span style=\"color:#abb2bf;\">,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;email&#39;</span><span style=\"color:#abb2bf;\">: user_email,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;id&#39;</span><span style=\"color:#abb2bf;\">: user_id,\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#9acc76;\">&#39;user_login&#39;</span><span style=\"color:#abb2bf;\">: user_login\n</span><span style=\"color:#abb2bf;\">    })\n</span></code></pre>\n<p>The API we are using for our sponsor-only feature is straightforward:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\">@app.</span><span style=\"color:#eb6772;\">route</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;/exclude&#39;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">methods</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">[</span><span style=\"color:#9acc76;\">&#39;POST&#39;</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#9acc76;\">&#39;GET&#39;</span><span style=\"color:#abb2bf;\">])\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">mark_node</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if </span><span style=\"color:#abb2bf;\">request.method </span><span style=\"color:#adb7c9;\">== </span><span style=\"color:#9acc76;\">&#39;POST&#39;</span><span style=\"color:#abb2bf;\">:\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#cd74e8;\">if </span><span style=\"color:#9acc76;\">&#39;id&#39; </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#abb2bf;\">request.json:\n</span><span style=\"color:#abb2bf;\">            node_id</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">request.json[</span><span style=\"color:#9acc76;\">&#39;id&#39;</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">else</span><span style=\"color:#abb2bf;\">:\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#cd74e8;\">if </span><span style=\"color:#9acc76;\">&#39;id&#39; </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#abb2bf;\">request.args:\n</span><span style=\"color:#abb2bf;\">            node_id</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">request.args.</span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;id&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    user_id </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">session.</span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;user_id&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&quot;Got user </span><span style=\"color:#abb2bf;\">{user_id}</span><span style=\"color:#9acc76;\"> from session&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if not </span><span style=\"color:#abb2bf;\">user_id:\n</span><span style=\"color:#abb2bf;\">        user_id </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">request.cookies.</span><span style=\"color:#eb6772;\">get</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;user_id&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&quot;Got user </span><span style=\"color:#abb2bf;\">{user_id}</span><span style=\"color:#9acc76;\"> from cookie&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    redis_client.</span><span style=\"color:#eb6772;\">sadd</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&quot;user:</span><span style=\"color:#db9d63;\">%s</span><span style=\"color:#9acc76;\">:mnodes&quot; </span><span style=\"color:#adb7c9;\">% </span><span style=\"color:#abb2bf;\">user_id,node_id)\n</span><span style=\"color:#abb2bf;\">    response </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">jsonify</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">message</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&quot;Finished </span><span style=\"color:#abb2bf;\">{node_id}</span><span style=\"color:#9acc76;\"> and </span><span style=\"color:#abb2bf;\">{user_id}</span><span style=\"color:#9acc76;\">&quot;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">response\n</span></code></pre>\n<p>And the only purpose of this API is to mark nodes as unimportant for the given user by adding nodes to RedisSet, and those nodes will be excluded from search API output. So far, everything was pretty standard: basic flask API and GitHub Social login flow. Now let's add Redis Enterprise and synchronise sponsors preferences.</p>\n<h1 id=\"add-redis-enterprise\">Add Redis Enterprise</h1>\n<p>Why not use Redis Enterprise directly for everything? \nThe project is memory-heavy, with a lot of data and machine learning inside Redis. This allows to achieve state-of-the-art performance, but it also takes over 120 GB RAM (or as much RAM as you can give it), and 128 GB Redis Enterprise instance will exceed my budget for open-source project. Obviously if there will be enough sponsors we can move more functionality into Redis Enterprise, but for that we need to finish building basic blocks. Register on <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://redis.com/?utm_campaign=write_for_redis\">Redis.com</a> cloud and create a database with the subscription.</p>\n<p><img src=\"https://reference-architecture.ai/posts/github-oauth2/redis_enterprise_screen.png\" alt=\"Redis Enterprise\" />\nTake a note host, port and password for Redis Enterprise and create docker enviroment file: </p>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#eb6772;\">cat</span><span style=\"color:#abb2bf;\"> .env.gears \n</span><span style=\"color:#eb6772;\">REDISENT_PWD</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;123&quot;\n</span><span style=\"color:#eb6772;\">REDISENT_PORT</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;13444&quot;\n</span><span style=\"color:#eb6772;\">REDISENT_HOST</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;hostname.cloud.redislabs.com&quot;\n</span></code></pre>\n<p>and create a docker compose with section passing .env.gears. Mine looks like this:</p>\n<pre style=\"background-color:#2b303b;color:#6c7079;\"><code><span style=\"color:#abb2bf;\">  redisgraph:\n</span><span style=\"color:#abb2bf;\">    image: redislabs/redismod\n</span><span style=\"color:#abb2bf;\">    container_name: redisgears\n</span><span style=\"color:#abb2bf;\">    hostname: redisgears\n</span><span style=\"color:#abb2bf;\">    env_file:\n</span><span style=\"color:#abb2bf;\">      - ./.env.gears\n</span><span style=\"color:#abb2bf;\">    ports:\n</span><span style=\"color:#abb2bf;\">      - 127.0.0.1:9001:6379\n</span><span style=\"color:#abb2bf;\">\n</span></code></pre>\n<h1 id=\"synchronize-redis-oss-to-redis-enterprise-using-redisgears\">Synchronize Redis OSS to Redis Enterprise using RedisGears</h1>\n<h2 id=\"synchronize-all-user-preferences\">Synchronize all user preferences</h2>\n<p>First flow:\nWe will be using RedisGears to synchronize all preferences with Redis Enterprise</p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">flowchart LR\n    id1(User Preferences Redis OSS) --&gt; redis_gears1(Redis Gears)--&gt; redise(Redis Enterprise)</div>\n<p>If you are new to RedisGears, there is a pattern <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/RedisGears/rgsync/tree/master/examples/redis\">rgsync</a> that covers exacly this use case, but I already have RedisGears, so I am going to build it step by step:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"font-style:italic;color:#5f697a;\"># gears_sync_preferences.py\n</span><span style=\"color:#abb2bf;\">rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">None\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">redis \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">os \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(os.environ))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># Get environment variables\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">HOST </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_HOST&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">PASSWORD </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_PWD&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">PORT </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_PORT&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    redis_client</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redis.</span><span style=\"color:#eb6772;\">Redis</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">host</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">HOST</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">port</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">PORT</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">charset</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;utf-8&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">password</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">PASSWORD</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">decode_responses</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">redis_client\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">sync_users</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">record</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">global </span><span style=\"color:#abb2bf;\">rconn\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if not </span><span style=\"color:#abb2bf;\">rconn:\n</span><span style=\"color:#abb2bf;\">        rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># Uncomment logs to check \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># log(str(record[&#39;key&#39;]))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># log(str(record[&#39;value&#39;]))\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    rconn.</span><span style=\"color:#eb6772;\">hset</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">],</span><span style=\"color:#eb6772;\">mapping</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">record[</span><span style=\"color:#9acc76;\">&#39;value&#39;</span><span style=\"color:#abb2bf;\">])\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">gb </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">GB</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">foreach</span><span style=\"color:#abb2bf;\">(sync_users)\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">count</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">run</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;user_details:*&#39;</span><span style=\"color:#abb2bf;\">)\n</span></code></pre>\n<p>this is a &quot;batch&quot; mode for RedisGears, which is easier to debug than streams. Install gears-cli](https://github.com/RedisGears/gears-cli) with <code>pip install gears-cli</code> run above script:</p>\n<pre data-lang=\"bash\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-bash \"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#eb6772;\">gears-cli</span><span style=\"color:#abb2bf;\"> run</span><span style=\"color:#eb6772;\"> --host</span><span style=\"color:#abb2bf;\"> 127.0.0.1</span><span style=\"color:#eb6772;\"> --port</span><span style=\"color:#abb2bf;\"> 9001 gears_sync_preferences.py</span><span style=\"color:#eb6772;\"> --requirements</span><span style=\"color:#abb2bf;\"> req_sync.txt\n</span></code></pre>\n<p>where req_sync.txt</p>\n<pre data-lang=\"pip\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-pip \"><code class=\"language-pip\" data-lang=\"pip\"><span style=\"color:#abb2bf;\">redis==3.5.3\n</span></code></pre>\n<p>This RedisGears will copy all user's profiles into RedisEnterprise. Now let us add sponsors:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"font-style:italic;color:#5f697a;\"># gears_sync_sponsors.py\n</span><span style=\"color:#abb2bf;\">rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">None\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">remove_prefix</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">text</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">prefix</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">text[text.</span><span style=\"color:#eb6772;\">startswith</span><span style=\"color:#abb2bf;\">(prefix) </span><span style=\"color:#cd74e8;\">and </span><span style=\"color:#5ebfcc;\">len</span><span style=\"color:#abb2bf;\">(prefix):]\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">redis \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">os \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(os.environ))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># Get environment variables\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">HOST </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_HOST&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">PASSWORD </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_PWD&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">PORT </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_PORT&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">HOST</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">PORT</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">PASSWORD</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    redis_client</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redis.</span><span style=\"color:#eb6772;\">Redis</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">host</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">HOST</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">port</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">PORT</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">charset</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;utf-8&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">password</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">PASSWORD</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">redis_client\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">sync_sponsors</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">record</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">global </span><span style=\"color:#abb2bf;\">rconn\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if not </span><span style=\"color:#abb2bf;\">rconn:\n</span><span style=\"color:#abb2bf;\">        rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">]))\n</span><span style=\"color:#abb2bf;\">    values</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">execute</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;SMEMBERS&#39;</span><span style=\"color:#abb2bf;\">,record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">])\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(values))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">for </span><span style=\"color:#abb2bf;\">each_value </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#abb2bf;\">values:    \n</span><span style=\"color:#abb2bf;\">        rconn.</span><span style=\"color:#eb6772;\">sadd</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">],each_value)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">gb </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">GB</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;KeysReader&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">foreach</span><span style=\"color:#abb2bf;\">(sync_sponsors)\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">count</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">run</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;user:*&#39;</span><span style=\"color:#abb2bf;\">)\n</span></code></pre>\n<p>But this one will sync all user's preferences, but we only need sponsors - let us add another feature of RedisGears - filter:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\">rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">None\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">remove_prefix</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">text</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">prefix</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">text[text.</span><span style=\"color:#eb6772;\">startswith</span><span style=\"color:#abb2bf;\">(prefix) </span><span style=\"color:#cd74e8;\">and </span><span style=\"color:#5ebfcc;\">len</span><span style=\"color:#abb2bf;\">(prefix):]\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">():\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">redis \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">import </span><span style=\"color:#abb2bf;\">os \n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(os.environ))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"font-style:italic;color:#5f697a;\"># Get environment variables\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">HOST </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_HOST&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">PASSWORD </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_PWD&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">PORT </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">os.</span><span style=\"color:#eb6772;\">getenv</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;REDISENT_PORT&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    redis_client</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">redis.</span><span style=\"color:#eb6772;\">Redis</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">host</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">HOST</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">port</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">PORT</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#eb6772;\">charset</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;utf-8&quot;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">password</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">PASSWORD</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">decode_responses</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#abb2bf;\">redis_client\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">filter_sponsors</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">record</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    org_name</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;applied-knowledge-systems&quot;\n</span><span style=\"color:#abb2bf;\">    user_id </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">remove_prefix</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">],</span><span style=\"color:#9acc76;\">&#39;user:&#39;</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">    sponsor</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">execute</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;SISMEMBER&#39;</span><span style=\"color:#abb2bf;\">,</span><span style=\"color:#cd74e8;\">f</span><span style=\"color:#9acc76;\">&#39;sponsors:</span><span style=\"color:#abb2bf;\">{org_name}</span><span style=\"color:#9acc76;\">&#39;</span><span style=\"color:#abb2bf;\">,user_id)\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">return </span><span style=\"color:#5ebfcc;\">bool</span><span style=\"color:#abb2bf;\">(sponsor</span><span style=\"color:#adb7c9;\">==</span><span style=\"color:#db9d63;\">True</span><span style=\"color:#abb2bf;\">)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">sync_sponsors</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">record</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">global </span><span style=\"color:#abb2bf;\">rconn\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if not </span><span style=\"color:#abb2bf;\">rconn:\n</span><span style=\"color:#abb2bf;\">        rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">]))\n</span><span style=\"color:#abb2bf;\">    values</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">execute</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;SMEMBERS&#39;</span><span style=\"color:#abb2bf;\">,record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">])\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(values))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">for </span><span style=\"color:#abb2bf;\">each_value </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#abb2bf;\">values:    \n</span><span style=\"color:#abb2bf;\">        rconn.</span><span style=\"color:#eb6772;\">sadd</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">],each_value)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#abb2bf;\">gb </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#eb6772;\">GB</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">filter</span><span style=\"color:#abb2bf;\">(filter_sponsors)\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">foreach</span><span style=\"color:#abb2bf;\">(sync_sponsors)\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">count</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">gb.</span><span style=\"color:#eb6772;\">run</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;user:*&#39;</span><span style=\"color:#abb2bf;\">)\n</span></code></pre>\n<h2 id=\"fetch-sponsor-s-preferences-back-to-redis-oss-from-redis-enterprise\">Fetch sponsor's preferences back to Redis OSS from Redis Enterprise</h2>\n<p>Then we are going to use <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://oss.redis.com/redisgears/miss_event.html#fetch-data-on-keymiss-event?utm_campaign=write_for_redis\">Key miss events</a> from Redis Gears to fetch data for all users:</p>\n<div class=\"mermaid is-flex is-justify-content-center is-align-items-center\">flowchart LR\n    redise(Redis Enterprise)\n    redis_gears2(Redis Gears)--key miss---&gt;redise\n    redis_gears2--&gt;redisOSS[Redis OSS]</div>\n<p>and it's very easy, right from key miss example:</p>\n<pre data-lang=\"python\" style=\"background-color:#2b303b;color:#6c7079;\" class=\"language-python \"><code class=\"language-python\" data-lang=\"python\"><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#cd74e8;\">def </span><span style=\"color:#5cb3fa;\">fetch_data</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">r</span><span style=\"color:#abb2bf;\">):\n</span><span style=\"color:#abb2bf;\">    key </span><span style=\"color:#adb7c9;\">= </span><span style=\"color:#abb2bf;\">r[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">]\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">global </span><span style=\"color:#abb2bf;\">rconn\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">if not </span><span style=\"color:#abb2bf;\">rconn:\n</span><span style=\"color:#abb2bf;\">        rconn</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#eb6772;\">connecttoRedisEnterise</span><span style=\"color:#abb2bf;\">()\n</span><span style=\"color:#abb2bf;\">    values</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">rconn.</span><span style=\"color:#eb6772;\">smembers</span><span style=\"color:#abb2bf;\">(record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">])\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#eb6772;\">log</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#5ebfcc;\">str</span><span style=\"color:#abb2bf;\">(values))\n</span><span style=\"color:#abb2bf;\">    </span><span style=\"color:#cd74e8;\">for </span><span style=\"color:#abb2bf;\">each_value </span><span style=\"color:#cd74e8;\">in </span><span style=\"color:#abb2bf;\">values:    \n</span><span style=\"color:#abb2bf;\">        </span><span style=\"color:#eb6772;\">execute</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#9acc76;\">&#39;SADD&#39;</span><span style=\"color:#abb2bf;\">,record[</span><span style=\"color:#9acc76;\">&#39;key&#39;</span><span style=\"color:#abb2bf;\">],each_value)\n</span><span style=\"color:#abb2bf;\">\n</span><span style=\"color:#eb6772;\">GB</span><span style=\"color:#abb2bf;\">().</span><span style=\"color:#eb6772;\">foreach</span><span style=\"color:#abb2bf;\">(fetch_data).</span><span style=\"color:#eb6772;\">register</span><span style=\"color:#abb2bf;\">(</span><span style=\"color:#eb6772;\">prefix</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&#39;user:*&#39;</span><span style=\"color:#abb2bf;\">, </span><span style=\"color:#eb6772;\">commands</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">[</span><span style=\"color:#9acc76;\">&#39;smember&#39;</span><span style=\"color:#abb2bf;\">],</span><span style=\"color:#eb6772;\">eventTypes</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#abb2bf;\">[</span><span style=\"color:#9acc76;\">&#39;keymiss&#39;</span><span style=\"color:#abb2bf;\">], </span><span style=\"color:#eb6772;\">mode</span><span style=\"color:#adb7c9;\">=</span><span style=\"color:#9acc76;\">&quot;async_local&quot;</span><span style=\"color:#abb2bf;\">)\n</span></code></pre>\n<p>There is one more option - to turn fetch_data into the async call, by wrapping it into async/await, but Redis Enterprise is fairly fast, and I don't think it's worth adding an async call in this case. For curiosity, see the example <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern-api/blob/54e96ff7ef9fddbb1ad7c34d1fd5a4333a4d4c41/qasearch/qa_redisai_gear_map_keymiss_np.py#L21\">code</a> in The Pattern repository.</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>In this article, we walked through steps on how to create sponsor-specific &quot;nanoservices&quot; using RedisOSS, RedisGears and Redis Enterprise. This allows us to leverage the best of all worlds open source Redis, high availability and persistence with Redis Enterprise and RedisGears as the glue which holds everything together.</p>\n<p>This post is in collaboration with Redis.</p>\n<h1 id=\"references\">References</h1>\n<ul>\n<li>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://creativewebspecialist.co.uk/2021/01/08/how-to-use-github-sponsors-to-help-monetize-your-software/\">How to use GitHub Sponsors to help monetize your software</a></p>\n</li>\n<li>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/community/community/discussions/3818\">Who sponsors this user?</a></p>\n</li>\n<li>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://gist.github.com/alexellis/6212c988189323dbb2806d1c7f7699ab\">Check sponsors.go - query whether a GitHub user is your sponsor at a given tier (dollar amount)</a></p>\n</li>\n<li>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://gist.github.com/xros/aba970d1098d916200d0acce8feb0251\">GitHub OAuth2 Gist</a> </p>\n</li>\n<li>\n<p><a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://docs.github.com/en/graphql/overview/explorer\">GraphQL explorer</a></p>\n</li>\n</ul>\n"
},{"title": "Announcing Reference Architecture for AI",
"url": "https://reference-architecture.ai/posts/post-0/",
"body": "<p>There are tools for advanced analytics, including free ones from Google and Kaggle.</p>\n<p>There are well-known and validated deployment architectures for applications and the cloud.</p>\n<p>Yet the number of practical applications is still tiny, and they retained niche implementations.\nWhile the benefits of AI are clear, there are still many gaps in AI architecture that need to be filled. For example, there is a gap between analytical tools and verified architectures for real-time deployments. This gap often stems from a lack of specific reference architectures and patterns, demonstrating the trade-offs between technologies, libraries, and tools.</p>\n<p>Let's bridge the gap in knowledge and drive a connection between science and engineering to make fast, efficient, and practical AI deployments.\nThree things need to be in place to build an AI product:</p>\n<ol>\n<li>AI Product itself</li>\n<li>Core Capabilities required to build AI/ML product</li>\n<li>Enabling capabilities</li>\n</ol>\n<p>I will use <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://thepattern.digital/\">The Pattern</a>, my [“Build on Redis<a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://redis.com/blog/build-on-redis-hackathon-winners/\">” Hackathon </a>prize-winning <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/applied-knowledge-systems/the-pattern\">open source</a>](https://github.com/applied-knowledge-systems/the-pattern) project, to illustrate how the capabilities below can be implemented and invite you to <a href=\"/docs/contribution/\">contribute</a> or <a href=\"/docs/donate\">donate</a>. </p>\n<p>We launch in two full-featured articles - <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://reference-architecture.ai/docs/nlp/\">NLP ML pipeline for</a> turning unstructured JSON text into a knowledge graph and fresh off the press <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://reference-architecture.ai/docs/bert-qa-benchmarking/\">Benchmarks for BERT Large Question Answering inference for RedisAI and RedisGears</a> with Grafana Dashboards by <a rel=\"noopener nofollow noreferrer\" target=\"_blank\" href=\"https://volkovlabs.com/from-a-basic-redistimeseries-data-source-to-2-million-downloads-in-grafana-marketplace-9921ed9ac5a\">Mikhail Volkov</a></p>\n"
}]